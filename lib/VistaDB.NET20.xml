<?xml version="1.0"?><doc><assembly><name>VistaDB.NET20</name></assembly><members><member name="T:VistaDB.Provider.VistaDBCommand"><summary>
            Represents a V-SQL statement to execute against a VistaDB database.  This class cannot be inherited.
            </summary><example>
            The following example creates a SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "select * from customers";
            	return command;
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.#ctor"><summary>
            Initializes a new instance of the VistaDBCommand class.
            </summary><example>
            The following example creates SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "select * from customers";
            	return command;
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.#ctor(System.String)"><summary>
            Initializes a new instance of the VistaDBCommand class with the text of the query.
            </summary><param name="commandText">The text of the query.</param><example>
            The following example creates a SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	return new VistaDBCommand("select * from customers", connection);
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.#ctor(System.String,VistaDB.Provider.VistaDBConnection)"><summary>
            Initializes a new instance of the VistaDBCommand class with the text of the query and a VistaDBConnection.
            </summary><param name="commandText">The text of the query.</param><param name="connection">A VistaDBConnection that represents the connection to an instance of VistaDB Database. </param><example>
            The following example creates a SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	return new VistaDBCommand("select * from customers", connection);
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.BuildEstimatedExecutionPlan"><summary>
            Build query execution plan
            </summary><returns>Return query execution plan</returns></member><member name="M:VistaDB.Provider.VistaDBCommand.Cancel"><summary>
            Attempts to cancels the execution of a VistaDBCommand.
            </summary></member><member name="M:VistaDB.Provider.VistaDBCommand.CreateParameter"><summary>
            Creates a new instance of a VistaDBParameter object.
            </summary><returns>A VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBCommand.ExecuteReader"><summary>
            Executes the CommandText against the Connection, and returns an VistaDBDataReader. 
            </summary><returns>A VistaDBDataReader object.</returns><example>
            The following example creates a VistaDBCommand, and then executes it.
            <code>
            public void Execute(VistaDBCommand command)
            {
            	try
            	{
            		command.Connection.Open();
            
            		using(VistaDBDataReader reader = command.ExecuteReader())
            		{
            			while(reader.Read())
            			{
            				Console.WriteLine("{0}", reader[0]);
            			}
            		}
            	}
            	finally
            	{
            		command.Connection.Close();
            	}
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.ExecuteReader(System.Data.CommandBehavior)"><summary>
            Executes the CommandText against the Connection, and returns an VistaDBDataReader using one of the CommandBehavior values.
            </summary><param name="behavior">One of the CommandBehavior values.</param><returns>A VistaDBDataReader object.</returns><example>
            The following example creates a VistaDBCommand, and then executes it.
            <code>
            public void Execute(VistaDBCommand command)
            {
            	command.Connection.Open();
            
            	using(VistaDBDataReader reader = command.ExecuteReader(CommandBehavior.CloseConnection))
            	{
            		while(reader.Read())
            		{
            			Console.WriteLine("{0}", reader[0]);
            		}
            	}
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.ExecuteNonQuery"><summary>
            Executes a SQL statement against a connection object.
            </summary><returns>The number of rows affected.</returns><example>
            The following example insert new row with using parameters
            <code>
            public void InsertRow(VistaDBConnection connection, long id_Customer)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "INSERT INTO Orders (ID_Customer) VALUES (@ID_Customer)";
            	command.Parameters.Add("@ID_Customer", id_Customer);
            	command.ExecuteNonQuery();
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.ExecuteScalar"><summary>
            Executes the query and returns the first column of the first row in the result set returned by the query. All other columns and rows are ignored.
            </summary><returns>The first column of the first row in the result set.</returns><example>
            The following example return row count for table Orders.
            <code>
            public long GetOrdersRowCount(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand("SELECT COUNT(*) FROM Orders", connection);
            	return (long)command.ExecuteScalar();
            }
            </code></example></member><member name="M:VistaDB.Provider.VistaDBCommand.Prepare"><summary>
            Creates a prepared version of the command on the data source.
            </summary><seealso cref="T:VistaDB.Provider.VistaDBCommand" /></member><member name="M:VistaDB.Provider.VistaDBCommand.Dispose(System.Boolean)"><summary></summary><param name="disposing"></param></member><member name="P:VistaDB.Provider.VistaDBCommand.CommandText"><summary>
            Gets or sets the text command to run against the data source.
            </summary><example>
            The following example creates a SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "select * from customers";
            	return command;
            }
            </code></example></member><member name="P:VistaDB.Provider.VistaDBCommand.CommandTimeout"><summary>
            This property not supported. Always return 0.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.CommandType"><summary>
            Indicates or specifies how the CommandText property is interpreted.
            VistaDB supports only Text and StoredProcedures command types.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.Connection"><summary>
            Gets or sets the VistaDBConnection used by this VistaDBCommand. 
            </summary><example>
            The following example creates a SqlCommand and associated it with VistaDBConnection object
            <code>
            public VistaDBCommand CreateCommand(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "select * from customers";
            	return command;
            }
            </code></example></member><member name="P:VistaDB.Provider.VistaDBCommand.DesignTimeVisible"><summary>
            This property is not intended to be used in your code. It is used internally to support the designers.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.HasDataSetResult"><summary>
            This property is obsolete. It is not intended to be used in your code.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.HasDDLCommands"><summary>
            True if command has DDL commands
            </summary><example>
            The following example write information about will be changed database structure by executing this query or no.
            <code>
            public void CheckDDL(VistaDBConnection connection)
            {
            	VistaDBCommand command = new VistaDBCommand(string.Empty, connection);
            
            	//Check first query
            	command.CommandText = "CREATE TABLE Orders (ID_Order Int64 NOT NULL IDENTITY(1, 1) PRIMARY KEY, ID_Customer Int64 FOREIGN KEY)";
            	if(command.HasDDL)
            		Console.WriteLine("Query has DDL commands");
            	else
            		Console.WriteLine("Query hasn't DDL commands");
            }
            </code>
            Output:
            <para>Query has DDL commands</para></example></member><member name="P:VistaDB.Provider.VistaDBCommand.Parameters"><summary>
            Gets the collection of VistaDBParameter objects. 
            </summary><example>
            The following example insert new row with using parameters
            <code>
            public void InsertRow(VistaDBConnection connection, long id_Customer)
            {
            	VistaDBCommand command = new VistaDBCommand();
            	command.Connection = connection;
            	command.CommandText = "INSERT INTO Orders (ID_Customer) VALUES (@ID_Customer)";
            	command.Parameters.Add("@ID_Customer", id_Customer);
            	command.ExecuteNonQuery();
            }
            </code></example></member><member name="P:VistaDB.Provider.VistaDBCommand.ResultCount"><summary>
            This property is obsolete. It is not intended to be used in your code.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.Transaction"><summary>
            Gets or sets the VistaDBTransaction within which this VistaDBCommand object executes.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommand.UpdatedRowSource"><summary>
            Gets or sets how command results are applied to the DataRow when used by the Update method of a VistaDBDataAdapter.
            </summary></member><member name="T:VistaDB.Provider.VistaDBCommandBuilder"><summary>
             Automatically generates single-table commands that are used to reconcile changes made to a DataSet with the associated VistaDB database. This class cannot be inherited.
             <remarks><para>If you use a DataSet and are setting AutoIncrementStep and AutoIncrementSeed values you MUST set them in the right order as noted here:
             http://msdn2.microsoft.com/en-us/library/system.data.datacolumn.autoincrementseed.aspx
             </para><para>
             When modifying the AutoIncrement* properties of a column after the table has been filled, it is important to set the AutoIncrementStep first, before the AutoIncrementSeed. This is because the effect of setting the AutoIncrementSeed changes based on the value of AutoIncrementStep.
             For example, a common pattern is to set AutoIncrementSeed and AutoIncrementStep to -1, so that there is no chance of new rows conflicting with existing rows. However, if you set the AutoIncrementSeed first, and then the AutoIncrementStep, the value of AutoIncrementSeed is ignored. This is the progression that illustrates the problem:
             <list type="number"><item><description>The table is created during a call to DbAdapter.Fill. At this point, the AutoIncrementSeed is 0 and the AutoIncrementStep is 1.</description></item><item><description>As rows are added to the table during the fill, the value of an internal variable called autoIncrementCurrent is incremented so that it is always at least 1 greater than the greatest existing value in the column.</description></item><item><description>AutoIncrementSeed is set to -1. At this point, the column compares the new value of AutoIncrementSeed to the value of autoIncrementCurrent. Since autoIncrementCurrent is greater than AutoIncrementSeed, AND AutoIncrementStep is greater than 0, the column assumes that the generated values have already passed the seed value, and so it does NOT reset autoIncrementCurrent.</description></item><item><description>AutoIncrementStep is set to -1.</description></item><item><description>A new row is inserted. The value of the identity column is set to autoIncrementCurrent + AutoIncrementStep, which will be equal to the greatest value currently in the table, causing a constraint violation.</description></item></list>
             By setting the AutoIncrementStep to -1 first, when the AutoIncrementSeed is set, the column sees that the new seed value is "farther along" (i.e. more negative) than autoIncrementCurrent, and so it resets autoIncrementCurrent to the new value of AutoIncrementSeed.
             </para></remarks></summary><example><code lang="vbnet">
             Private Sub Example(ByVal SelectString As String, ByVal ConString As String)
            		Me.mAdapter = New VistaDB.Provider.VistaDBDataAdapter 
            		Me.mAdapter.SelectCommand = New VistaDB.Provider.VistaDBCommand(SelectString, New VistaDBConnection(ConString))
            		Dim cmdBuilder As VistaDB.Provider.VistaDBCommandBuilder = New VistaDB.Provider.VistaDBCommandBuilder(Me.mAdapter)
            		Me.mAdapter.InsertCommand = cmdBuilder.GetInsertCommand
            		Me.mAdapter.UpdateCommand = cmdBuilder.GetUpdateCommand
            		Me.mAdapter.DeleteCommand = cmdBuilder.GetDeleteCommand
            		Me.mAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey
            		
            		' ORDER IS VERY IMPORTANT HERE STEP THEN SEED
            		mData = New DataSet
            		mAdapter.Fill(mData)
            		mData.Tables!Table.Columns!ID.AutoIncrement = True
            		mData.Tables!Table.Columns!ID.AutoIncrementStep = -1
            		mData.Tables!Table.Columns!ID.AutoIncrementSeed = -1
            		mData.Tables!Table.Columns!ID.ReadOnly = False
             End Sub
             </code><code lang="cs">
             static void Example( string SelectString, string ConnString )
             {
            		VistaDBDataAdapter mAdapter = new VistaDBDataAdapter();
            		mAdapter.SelectCommand = new VistaDBCommand(SelectString, new VistaDBConnection(ConnString));
            		VistaDBCommandBuilder cmdBuilder = new VistaDBCommandBuilder(mAdapter);
            		
            		mAdapter.InsertCommand = cmdBuilder.GetInsertCommand();
            		mAdapter.UpdateCommand = cmdBuilder.GetUpdateCommand();
            		mAdapter.DeleteCommand = cmdBuilder.GetDeleteCommand();
            		mAdapter.MissingSchemaAction = System.Data.MissingSchemaAction.AddWithKey;
            		
            		DataSet mData = new DataSet();
            		mAdapter.Fill(mData);
            		// NOTE: The order of these two is IMPORTANT
            		// STEP MUST come before SEED
            		mData.Tables[0].Columns[0].AutoIncrementStep = -1;
            		mData.Tables[0].Columns[0].AutoIncrementSeed = -1;
            		mData.Tables[0].Columns[0].ReadOnly = false;
            		}
             </code></example><seealso cref="T:VistaDB.Provider.VistaDBDataAdapter" /><seealso cref="T:VistaDB.Provider.VistaDBCommand" /><see href="http://msdn2.microsoft.com/en-us/library/system.data.datacolumn.autoincrementseed.aspx">MSDN AutoIncrementSeed information&gt;</see></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.#ctor"><summary>
            Initializes a new instance of the VistaDBCommandBuilder class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.#ctor(VistaDB.Provider.VistaDBDataAdapter)"><summary>
            Initializes a new instance of the VistaDBCommandBuilder class with the associated VistaDBDataAdapter object.
            </summary><param name="dataAdapter">VistaDBDataAdapter object.</param></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetDeleteCommand"><summary>
            Gets the automatically generated VistaDBCommand object required to perform deletions at the data source.
            </summary><returns>The automatically generated VistaDBCommand object required to perform deletions.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetDeleteCommand(System.Boolean)"><summary>
            Gets the automatically generated VistaDBCommand object required to perform deletions at the data source, optionally using columns for parameter names.
            </summary><param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param><returns>The automatically generated VistaDBCommand object required to perform deletions.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetInsertCommand"><summary>
            Gets the automatically generated VistaDBCommand object required to perform insertions at the data source.
            </summary><returns>The automatically generated VistaDBCommand object required to perform insertions.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetInsertCommand(System.Boolean)"><summary>
            Gets the automatically generated VistaDBCommand object required to perform insertions at the data source, optionally using columns for parameter names.
            </summary><param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param><returns>The automatically generated VistaDBCommand object required to perform insertions.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetUpdateCommand"><summary>
            Gets the automatically generated VistaDBCommand object required to perform updates at the data source.
            </summary><returns>The automatically generated VistaDBCommand object required to perform updates.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.GetUpdateCommand(System.Boolean)"><summary>
            Gets the automatically generated VistaDBCommand object required to perform updates at the data source, optionally using columns for parameter names.
            </summary><param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param><returns>The automatically generated VistaDBCommand object required to perform updates.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.QuoteIdentifier(System.String)"><summary>
            Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.
            </summary><param name="unquotedIdentifier">The original unquoted identifier.</param><returns>The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.</returns></member><member name="M:VistaDB.Provider.VistaDBCommandBuilder.UnquoteIdentifier(System.String)"><summary>
            Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.
            </summary><param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param><returns>The unquoted identifier, with embedded quotes properly un-escaped.</returns></member><member name="P:VistaDB.Provider.VistaDBCommandBuilder.DataAdapter"><summary>
            Gets or sets a VistaDBDataAdapter object for which SQL statements are automatically generated.
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommandBuilder.SchemaSeparator"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBCommandBuilder.QuotePrefix"><summary>
            Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            VistaDB supports only "[" as quote prefix
            </summary></member><member name="P:VistaDB.Provider.VistaDBCommandBuilder.QuoteSuffix"><summary>
            Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens.
            VistaDB supports only "]" as quote suffix
            </summary></member><member name="T:VistaDB.Provider.VistaDBConnection"><summary>
            Represents an open connection to a VistaDB database. This class cannot be inherited.
            <para>It is considered a best practice to close the connection as soon as you are finished with it.  Do NOT place the .Close() 
            call in a Finalizer or object destructor.  Both of those are non-deterministic (you cannot predict when or if they will be called).  
            This leads to connection handle leaks over the lifetime of an application.</para></summary><example>
            The following example creates and opens a VistaDBConnection.
            <code>
            public VistaDBConnection OpenConnection(string connectionString)
            {
            	VistaDBConnection connection = new VistaDBConnection(connectionString);
            	connection.Open();
            	return connection;
            }
            </code><remarks><para>The static function VistaDBConnection.ClearAllPools(); will cause all open connection pools to be closed.</para><para>To clear a single pool instanace call the static function VistaDBConnection.ClearPool( myConnection );  Where myConnection is a properly initialized VistaDBConnection object.</para></remarks></example><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearAllPools" /><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearPool(VistaDB.Provider.VistaDBConnection)" /></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_METADATACOLLECTIONS"><summary>
            Met data collections
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_DATASOURCEINFORMATION"><summary>
            Data source information
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_DATATYPES"><summary>
            Data types
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_COLUMNS"><summary>
            Columns
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_INDEXES"><summary>
            Indexes
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_INDEXCOLUMNS"><summary>
            Index columns
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_TABLES"><summary>
            Tables
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_FOREIGNKEYS"><summary>
            Foreign keys
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_FOREIGNKEYCOLUMNS"><summary>
            Foreign key columns
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_RESERVEDWORDS"><summary>
            Reserved words
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_VIEWS"><summary>
            Views
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_VIEWCOLUMNS"><summary>
            View columns
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SCHEMA_RESTRICTIONS"><summary>
            Restrictions
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnection.ClearAllPools"><summary>
            Empties the connection pools.
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnection.ClearPool(VistaDB.Provider.VistaDBConnection)"><summary>
            Empties the connection pool associated with the specified connection.
            </summary><param name="connection">The VistaDBConnection to be cleared from the pool.</param></member><member name="F:VistaDB.Provider.VistaDBConnection.SystemSchema"><summary>
            System table name
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.SystemTableType"><summary>
            System table type name
            </summary></member><member name="F:VistaDB.Provider.VistaDBConnection.UserTableType"><summary>
            User table type name
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnection.#ctor"><summary>
            Represents an open connection to a VistaDB database. This class cannot be inherited.
            <para>It is considered a best practice to close the connection as soon as you are finished with it.  Do NOT place the .Close() 
            call in a Finalizer or object destructor.  Both of those are non-deterministic (you cannot predict when or if they will be called).  
            This leads to connection handle leaks over the lifetime of an application.</para></summary><example>
            The following example creates and opens a VistaDBConnection.
            <code>
            public VistaDBConnection OpenConnection(string connectionString)
            {
            	VistaDBConnection connection = new VistaDBConnection(connectionString);
            	connection.Open();
            	return connection;
            }
            </code><remarks><para>If you have a connection with connection pooling enabled and you wish to close all of them call the static function VistaDBConnection.ClearAllPools();</para><para>To clear a single pool instanace you call the static function VistaDBConnection.ClearPool( myConnection );  Where myConnection is a properly initialized VistaDBConnection object.</para></remarks></example><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearAllPools" /><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearPool(VistaDB.Provider.VistaDBConnection)" /></member><member name="M:VistaDB.Provider.VistaDBConnection.#ctor(System.String)"><summary>
            Initializes a new instance of the VistaDBConnection class when given a string that contains the connection string.
            <para>It is considered a best practice to close the connection as soon as you are finished with it.  Do NOT place the .Close() 
            call in a Finalizer or object destructor.  Both of those are non-deterministic (you cannot predict when or if they will be called).  
            This leads to connection handle leaks over the lifetime of an application.</para></summary><param name="connectionString">The connection used to open the VistaDB database.</param><example>
            The following example creates and opens a VistaDBConnection.
            <code>
            public VistaDBConnection OpenConnection(string connectionString)
            {
            	VistaDBConnection connection = new VistaDBConnection(connectionString);
            	connection.Open();
            	return connection;
            }
            </code><remarks><para>If you have a connection with connection pooling enabled and you wish to close all of them call the static function VistaDBConnection.ClearAllPools();</para><para>To clear a single pool instanace you call the static function VistaDBConnection.ClearPool( myConnection );  Where myConnection is a properly initialized VistaDBConnection object.</para></remarks></example><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearAllPools" /><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearPool(VistaDB.Provider.VistaDBConnection)" /><seealso cref="P:VistaDB.Provider.VistaDBConnection.ConnectionString" /></member><member name="M:VistaDB.Provider.VistaDBConnection.#ctor(VistaDB.DDA.IVistaDBDatabase)"><summary>
            Initializes a new instance of VistaDBConnection class with given IVistaDBDatabase instance.
            When connection is closed, database stays opened. In order to close the database you 
            have to call Close method of respective IVistaDBDatabase instance.
            </summary><param name="database">IVistaDBDatabase instance used for this connection.</param><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearAllPools" /><seealso cref="M:VistaDB.Provider.VistaDBConnection.ClearPool(VistaDB.Provider.VistaDBConnection)" /><seealso cref="T:VistaDB.DDA.IVistaDBDatabase" /></member><member name="M:VistaDB.Provider.VistaDBConnection.BeginTransaction"><summary>
            Starts a database transaction.
            </summary><returns>An object representing the new transaction.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.BeginTransaction(System.Data.IsolationLevel)"><summary>
            Starts a database transaction.
            </summary><param name="isolationLevel">Specifies the isolation level for the transaction.
            VistaDB supports only ReadCommited isolation level.</param><returns>An object representing the new transaction.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.ChangeDatabase(System.String)"><summary>
            This method is not supported
            </summary><param name="databaseName"></param></member><member name="M:VistaDB.Provider.VistaDBConnection.Close"><summary>
            Closes the connection to the database.
            <para>It is considered a best practive to close the database connection as soon as you are finished with it.
            Do NOT place this call in an object destructor or Finalize call.  That will lead to non-deterministic release
            of object handles and potential connection leaks.</para></summary><example>
            The following example closes a VistaDBConnection.
            <code>
            public void CloseConnection(VistaDBConnection connection)
            {
            	connection.Close();
            }
            </code></example><seealso cref="T:VistaDB.Provider.VistaDBConnection" /></member><member name="M:VistaDB.Provider.VistaDBConnection.CreateCommand"><summary>
            Creates and returns a VistaDBCommand object associated with the current connection.
            </summary><returns>A VistaDBCommand object.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.GetSchema"><summary>
            Returns schema information for the data source of this VistaDBConnection.
            </summary><returns>A DataTable that contains schema information.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.GetSchema(System.String)"><summary>
            Returns schema information for the data source of this VistaDBConnection using the specified string for the schema name.
            </summary><param name="collectionName">Specifies the name of the schema to return.</param><returns>A DataTable that contains schema information.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.GetSchema(System.String,System.String[])"><summary>
            Returns schema information for the data source of this VistaDBConnection using the specified string for the schema name and the specified string array for the restriction values.
            </summary><param name="collectionName">Specifies the name of the schema to return.</param><param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param><returns>A DataTable that contains schema information.</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.IsSyntaxCorrect(System.String,System.Int32@,System.Int32@,System.String@)"><summary>
            Check SQL command correctness
            </summary><param name="text">SQL Command Text</param><param name="lineNo">Line number in the text, where mistake occurred</param><param name="symbolNo">Symbol number in the text, where mistake occurred</param><param name="errorMessage">Error message</param><returns>Returs true if syntax is correct otherwise returns false</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.IsViewSyntaxCorrect(System.String,System.Int32@,System.Int32@,System.String@)"><summary>
            Check SQL command correctness of CREATE VIEW statement
            </summary><param name="text">SQL Command Text</param><param name="lineNo">Line number in the text, where mistake occured</param><param name="symbolNo">Symbol number in the text, where mistake occured</param><param name="errorMessage">Error message</param><returns>Returs true if syntax is correct otherwise returns false</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.IsConstraintSyntaxCorrect(System.String,System.Int32@,System.Int32@,System.String@)"><summary>
            Check SQL command of the constraint to validate it is correct.
            </summary><param name="text">SQL Command Text</param><param name="lineNo">Line number in the text, where mistake occurred</param><param name="symbolNo">Symbol number in the text, where mistake occurred</param><param name="errorMessage">Error message</param><returns>Returs true if syntax is correct otherwise returns false</returns></member><member name="M:VistaDB.Provider.VistaDBConnection.Open"><summary>
            Opens a database connection with the settings specified by the ConnectionString. By default the provider will attempt to open
            a connection from a connectionpool if one exists.  This caching of connections can lead to increased performance.
            </summary><example>
            The following example creates and opens a VistaDBConnection.
            <code>
            public VistaDBConnection OpenConnection(string connectionString)
            {
            	VistaDBConnection connection = new VistaDBConnection(connectionString);
            	connection.Open();
            	return connection;
            }
            </code></example><seealso cref="T:VistaDB.Provider.VistaDBConnection" /></member><member name="M:VistaDB.Provider.VistaDBConnection.Dispose(System.Boolean)"><summary></summary><param name="disposing"></param></member><member name="P:VistaDB.Provider.VistaDBConnection.ConnectionString"><summary>
            Gets or sets the string used to open the connection.
            </summary><remarks>
            The following list shows the valid names for keyword values within the ConnectionString.
            <list type="table"><item><term><b>Data Source</b></term><description>Database file name. You may also use the |DataDirectory| tag (see below)</description></item><item><term><b>Open Mode</b></term><description>Database open mode. Can be one of the following values: <b><i>ExclusiveReadWrite</i></b>, <b><i>ExclusiveReadOnly</i></b>, <b><i>NonexclusiveReadWrite</i></b>, <b><i>NonexclusiveReadOnly</i></b> and <b><i>SharedReadOnly</i></b>.</description></item><item><term><b>Password</b></term><description>Password used to encrypt\decrypt database content.</description></item><item><term><b>Min Pool Size</b></term><description>The minimum number of connections allowed in the pool. Default value is 0 (no pooling).</description></item><item><term><b>Context Connection</b></term><description>May be assigned only for CLR stored procedures. If set to true the context connection is used.</description></item><item><term><b>Isolated Storage</b></term><description>If it is set to true the database placed in isolated storage.</description></item></list><para></para>
            The VistaDBConnectionStringBuilder class provides functionality for creating and managing the contents of connection strings.
            <para>
            Also look at this document from MSDN.
            <see href="http://blogs.msdn.com/smartclientdata/archive/2005/08/26/456886.aspx">Smart Client Data</see></para><para>
            Basically what this document explains (and VistaDB supports) is the usage of the |DataDirectory| variable.</para><para>By default, the |DataDirectory| variable will be expanded as follow:
            <li>For applications placed in a directory on the user machine, this will be the app's (.exe) folder.</li><li>For apps running under ClickOnce, this will be a special data folder created by ClickOnce</li><li>For Web apps, this will be the App_Data folder</li>
            Under the hood, the value for |DataDirectory| simply comes from a property on the app domain. It is possible to change that value and override the default behavior by doing this:
            </para><code>
            AppDomain.CurrentDomain.SetData("DataDirectory", newpath)
            </code></remarks><example>
            The following example creates a VistaDBConnection and sets the ConnectionString property before opening the connection.
            <code>
            public VistaDBConnection OpenConnection()
            {
            	string connectionString = @"Data Source = C:\VistaDB.vdb3; Open Mode = ExclusiveReadWrite";
            	VistaDBConnection connection = new VistaDBConnection(connectionString);
            	connection.Open();
            	return connection;
            }
            </code></example><seealso cref="T:VistaDB.Provider.VistaDBConnectionStringBuilder" /><seealso cref="T:VistaDB.Provider.VistaDBConnection" /></member><member name="P:VistaDB.Provider.VistaDBConnection.ContextConnection"><summary>
            May be used only for CLR stored procedures.
            If it is set to true the context connection is used.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.Database"><summary>
            Get the name of the database.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.DataSource"><summary>
            Get the name of the database.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.IsolatedStorage"><summary>
            If it is set to true the database placed in isolated storage.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.OpenMode"><summary>
            Gets a value that indicates connection open mode.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.Password"><summary>
            Get the password of the database.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.ServerVersion"><summary>
            VistaDB version
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.LockTimeout"><summary>
            Get or set timeout for lock operations in seconds.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.PersistentLockFiles"><summary>
            Allows to control life-time of .lck files on hard drive. 
            If it is set to true this connection will not try to delete these files upon table closing. 
            It may give some performance boosting in multi-user environment.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnection.State"><summary>
            Gets a value that describes the state of the connection.
            </summary></member><member name="T:VistaDB.Provider.VistaDBConnectionStringBuilder"><summary>
            Provides a simple way to create and manage the contents of connection strings used by the VistaDBConnection class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.#ctor"><summary>
            Initializes a new instance of the VistaDBConnectionStringBuilder class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.#ctor(System.String)"><summary>
            Initializes a new instance of the VistaDBConnectionStringBuilder class. The provided connection string provides the data for the instance's internal connection information.
            </summary><param name="connectionString">The basis for the object's internal connection information. Parsed into name/value pairs.</param></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.Clear"><summary>
            Clears the contents of the VistaDBConnectionStringBuilder instance.
            </summary></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.ContainsKey(System.String)"><summary>
            Determines whether the VistaDBConnectionStringBuilder contains a specific key.
            </summary><param name="keyword">The key to locate in the VistaDBConnectionStringBuilder.</param><returns>true if the VistaDBConnectionStringBuilder contains an entry with the specified key; otherwise false.</returns></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.Remove(System.String)"><summary>
            Removes the entry with the specified key from the VistaDBConnectionStringBuilder instance.
            </summary><param name="keyword">The key of the key/value pair to be removed from the connection string in this VistaDBConnectionStringBuilder.</param><returns>true if the key existed within the connection string and was removed; false if the key did not exist.</returns></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.ShouldSerialize(System.String)"><summary>
            Indicates whether the specified key exists in this VistaDBConnectionStringBuilder instance.
            </summary><param name="keyword">The key to locate in the VistaDBConnectionStringBuilder.</param><returns>true if the VistaDBConnectionStringBuilder contains an entry with the specified key; otherwise, false.</returns></member><member name="M:VistaDB.Provider.VistaDBConnectionStringBuilder.TryGetValue(System.String,System.Object@)"><summary>
            Retrieves a value corresponding to the supplied key from this VistaDBConnectionStringBuilder.
            </summary><param name="keyword">The key of the item to retrieve.</param><param name="value">The value corresponding to the key.</param><returns>true if keyword was found within the connection string, false otherwise.</returns></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.ContextConnection"><summary>
            May be assigned only for CLR stored procedures.
            If set to true the context connection is used.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.Database"><summary>
            Database name
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.DataSource"><summary>
            Data source
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.IsFixedSize"><summary>
            Gets a value that indicates whether the VistaDBConnectionStringBuilder has a fixed size.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.IsolatedStorage"><summary>
            If it is set to true value the database resides in isolated storage.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.Keys"><summary>
            Gets an ICollection that contains the keys in the VistaDBConnectionStringBuilder.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.MinPoolSize"><summary>
            The minimum number of connections allowed in the pool. Default value is 0 (no pooling).
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.MaxPoolSize"><summary>
            The maximum number of connections allowed in the pool.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.ConnectTimeout"><summary>
            The maximum time in seconds to wait for a valid connection.
            By default we do not wait at all.  If there are no open connection pool slots available we return immediately with failure.
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.OpenMode"><summary>
            Connection open mode
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.Password"><summary>
            Database password
            </summary></member><member name="P:VistaDB.Provider.VistaDBConnectionStringBuilder.Values"><summary>
            Gets an ICollection that contains the values in the VistaDBConnectionStringBuilder.
            </summary></member><member name="T:VistaDB.Provider.VistaDBDataAdapter"><summary>
            Represents a set of data commands and a database connection that are used to fill the DataSet and update a VistaDB database. This class cannot be inherited.
            </summary></member><member name="M:VistaDB.Provider.VistaDBDataAdapter.#ctor"><summary>
            Initializes a new instance of the VistaDBDataAdapter class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBDataAdapter.#ctor(VistaDB.Provider.VistaDBCommand)"><summary>
            Initializes a new instance of the VistaDBDataAdapter class with the specified VistaDBCommand as the SelectCommand property.
            </summary><param name="selectCommand">A VistaDBCommand that is a SQL SELECT statement and is set as the SelectCommand property of the VistaDBDataAdapter.</param></member><member name="M:VistaDB.Provider.VistaDBDataAdapter.#ctor(System.String,VistaDB.Provider.VistaDBConnection)"><summary>
            Initializes a new instance of the VistaDBDataAdapter class with a SelectCommand and a VistaDBConnection object.
            </summary><param name="selectCommandText">A String that is a SELECT statement to be used by the SelectCommand property of the VistaDBDataAdapter. </param><param name="conn">A VistaDBConnection that represents the connection.</param></member><member name="M:VistaDB.Provider.VistaDBDataAdapter.#ctor(System.String,System.String)"><summary>
            Initializes a new instance of the VistaDBDataAdapter class with a SelectCommand and a connection string.
            </summary><param name="selectCommandText">A String that is a SELECT statement to be used by the SelectCommand property of the VistaDBDataAdapter. </param><param name="connectionString">The connection string.</param></member><member name="P:VistaDB.Provider.VistaDBDataAdapter.DeleteCommand"><summary>
            Gets or sets a command for deleting records from the data set.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataAdapter.InsertCommand"><summary>
            Gets or sets a command used to insert new records into the data source. 
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataAdapter.SelectCommand"><summary>
            Gets or sets a command used to select records in the data source.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataAdapter.UpdateCommand"><summary>
            Gets or sets a command used to update records in the data source.
            </summary></member><member name="E:VistaDB.Provider.VistaDBDataAdapter.RowUpdating"><summary>
            Occurs during Update before a command is executed against the data source. 
            The attempt to update is made, so the event fires.
            </summary></member><member name="E:VistaDB.Provider.VistaDBDataAdapter.RowUpdated"><summary>
            Occurs during Update after a command is executed against the data source. 
            The attempt to update is made, so the event fires.
            </summary></member><member name="T:VistaDB.Provider.VistaDBRowUpdatedEventArgs"><summary>
            Provides data for the RowUpdated event of a VistaDB data provider.
            </summary></member><member name="M:VistaDB.Provider.VistaDBRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"><summary>
            Initializes a new instance of the VistaDBRowUpdatedEventArgs class.
            </summary><param name="row">The DataRow sent through an Update.</param><param name="command">The IDbCommand to execute when Update is called.</param><param name="statementType">The type of SQL statement to execute.</param><param name="tableMapping">The DataTableMapping to send through an Update.</param></member><member name="P:VistaDB.Provider.VistaDBRowUpdatedEventArgs.Command"><summary>
            Gets or sets a new instance of the VistaDBCommand class.
            </summary></member><member name="T:VistaDB.Provider.VistaDBRowUpdatingEventArgs"><summary>
            Provides the data for the RowUpdating event of a VistaDB data provider. 
            </summary></member><member name="M:VistaDB.Provider.VistaDBRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"><summary>
            Initializes a new instance of the VistaDBRowUpdatingEventArgs class.
            </summary><param name="row">The DataRow to Update.</param><param name="command">The IDbCommand to execute when Update is called.</param><param name="statementType">The type of SQL statement to execute.</param><param name="tableMapping">The DataTableMapping to send through an Update.</param></member><member name="P:VistaDB.Provider.VistaDBRowUpdatingEventArgs.Command"><summary>
            Gets or sets a new instance of the VistaDBCommand class.
            </summary></member><member name="T:VistaDB.Provider.VistaDBRowUpdatingEventHandler"><summary>
            Represents the method that will handle the RowUpdating event of a VistaDBDataAdapter.
            </summary></member><member name="T:VistaDB.Provider.VistaDBRowUpdatedEventHandler"><summary>
            Represents the method that will handle the RowUpdated event of a VistaDBDataAdapter.
            </summary></member><member name="T:VistaDB.Provider.VistaDBDataPermission"><summary></summary></member><member name="M:VistaDB.Provider.VistaDBDataPermission.#ctor"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBDataReader"><summary>
            Provides a way of reading a forward-only stream of rows from a VistaDB 3 database. This class cannot be inherited.
            </summary><remarks>
            Wherever possible VistaDB attempts to match the Sytem.Data.SqlClient namespace (the .NET Framework Data Provider for SQL Server).  
            </remarks><example><code lang="cs">
            public void Simple()
            {
            	using( VistaDBConnection conn = new VistaDBConnection(@"Open Mode=NonExclusiveReadWrite;Data Source=simple.vdb3") )
            	{
            		Assert.IsNotNull(conn);
            		// Open the connection and verify the state is set correctly
            		conn.Open();
            		Assert.IsTrue(conn.State == ConnectionState.Open);
            
            		// This should return one column AMOUNT = 20
            		using( VistaDBCommand cmd = new VistaDBCommand("select sum(10+10) as amount", conn) )
            		{
            			VistaDBDataReader reader = cmd.ExecuteReader();
            			Assert.IsNotNull(reader);
            			Assert.IsNotNull(reader[0]);
            			Assert.IsTrue(reader.HasRows);
            			// SELECT commands should generate a -1 for RecordsAffected
            			Assert.AreEqual(reader.RecordsAffected, -1);	
            			Assert.IsTrue(reader["amount"].Equals("20"));
            		}
            	}
            }
            </code></example><seealso cref="T:System.Data.IDataReader" /></member><member name="M:VistaDB.Provider.VistaDBDataReader.Close"><summary>
            Closes the VistaDBDataReader object.
            </summary></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetBoolean(System.Int32)"><summary>
            Gets the value of the specified column as a Boolean.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetByte(System.Int32)"><summary>
            Gets the value of the specified column as a byte.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)"><summary>
            Reads a stream of bytes from the specified column, starting at location indicated by dataIndex, into the buffer, starting at the location indicated by bufferIndex.
            </summary><param name="ordinal">The zero-based column ordinal.</param><param name="dataOffset">The index within the row from which to begin the read operation.</param><param name="buffer">The buffer into which to copy the data.</param><param name="bufferOffset">The index with the buffer to which the data will be copied.</param><param name="length">The maximum number of characters to read.</param><returns>The actual number of bytes read.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetChar(System.Int32)"><summary>
            Gets the value of the specified column as a single character.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)"><summary>
            Reads a stream of characters from the specified column, starting at location indicated by dataIndex, into the buffer, starting at the location indicated by bufferIndex.
            </summary><param name="ordinal">The zero-based column ordinal.</param><param name="dataOffset">The index within the row from which to begin the read operation.</param><param name="buffer">The buffer into which to copy the data.</param><param name="bufferOffset">The index with the buffer to which the data will be copied.</param><param name="length">The maximum number of characters to read.</param><returns>The actual number of characters read.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetDataTypeName(System.Int32)"><summary>
            Gets name of the data type of the specified column.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>A string representing the name of the data type.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetDateTime(System.Int32)"><summary>
            Gets the value of the specified column as a DateTime object.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetDecimal(System.Int32)"><summary>
            Gets the value of the specified column as a Decimal object.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetDouble(System.Int32)"><summary>
            Gets the value of the specified column as a double-precision floating point number.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetEnumerator"><summary>
            Returns an IEnumerator that can be used to iterate through the rows in the data reader.
            </summary><returns>An IEnumerator that can be used to iterate through the rows in the data reader.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetFieldType(System.Int32)"><summary>
            Gets the data type of the specified column.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The data type of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetFieldVistaDBType(System.Int32)"><summary>
            Gets the VistaDBType of the specified column.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The VistaDBType of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetFloat(System.Int32)"><summary>
            Gets the value of the specified column as a single-precision floating point number.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetGuid(System.Int32)"><summary>
            Gets the value of the specified column as a globally-unique identifier (GUID).
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetInt16(System.Int32)"><summary>
            Gets the value of the specified column as a 16-bit signed integer.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetInt32(System.Int32)"><summary>
            Gets the value of the specified column as a 32-bit signed integer.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetInt64(System.Int32)"><summary>
            Gets the value of the specified column as a 64-bit signed integer.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetName(System.Int32)"><summary>
            Gets the name of the column, given the zero-based column ordinal.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The name of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetOrdinal(System.String)"><summary>
            Gets the column ordinal given the name of the column.
            </summary><param name="name">The name of the column.</param><returns>The zero-based column ordinal.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetSchemaTable"><summary>
            Returns a DataTable that describes the column metadata of the VistaDBDataReader.
            </summary><returns>A DataTable that describes the column metadata.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetString(System.Int32)"><summary>
            Gets the value of the specified column as an instance of String.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetValue(System.Int32)"><summary>
            Gets the value of the specified column as an instance of Object.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>The value of the specified column.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.GetValues(System.Object[])"><summary>
            Gets all attribute columns in the collection for the current row.
            </summary><param name="values">An array of Object into which to copy the attribute columns.</param><returns>The number of instances of Object in the array.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.IsDBNull(System.Int32)"><summary>
            Gets a value that indicates whether the column contains nonexistent or missing values.
            </summary><param name="ordinal">The zero-based column ordinal.</param><returns>true if the specified column is equivalent to DBNull; otherwise false.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.NextResult"><summary>
            Advances the reader to the next result when reading the results of a batch of statements.
            </summary><returns>This method allows you to process multiple result sets returned when a batch is submitted to the data provider.</returns></member><member name="M:VistaDB.Provider.VistaDBDataReader.Read"><summary>
            Advances the reader to the next record in a result set.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataReader.Depth"><summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataReader.FieldCount"><summary>
            Gets the number of columns in the current row.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataReader.HasRows"><summary>
            Gets a value that indicates whether this VistaDBDataReader contains one or more rows.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataReader.IsClosed"><summary>
            Gets a value indicating whether the VistaDBDataReader is closed.
            </summary></member><member name="P:VistaDB.Provider.VistaDBDataReader.RecordsAffected"><summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            <remarks>
            This will be set to 0 if no rows were affected or the statement failed.  This value shall be set to -1 for SELECT statements according to the IDataReader.RecordsAffected property.
            </remarks></summary><seealso cref="P:System.Data.IDataReader.RecordsAffected" /></member><member name="T:VistaDB.Provider.VistaDBParameterCollection"><summary>
            Represents a collection of parameters associated with a VistaDBCommand and their respective mappings to columns in a DataSet. This class cannot be inherited.
            </summary></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(System.Object)"><summary>
            Adds the specified VistaDBParameter object to the VistaDBParameterCollection.
            </summary><param name="value">An Object.</param><returns>The index of the new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(VistaDB.Provider.VistaDBParameter)"><summary>
            Adds the specified VistaDBParameter object to the VistaDBParameterCollection.
            </summary><param name="parameter">The VistaDBParameter to add to the collection.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(System.String,System.Object)"><summary>
            Adds the specified VistaDBParameter object to the VistaDBParameterCollection.
            </summary><param name="parameterName">The name of the VistaDBParameter to add to the collection.</param><param name="value">A Object.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(System.String,VistaDB.VistaDBType)"><summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection given the parameter name and the data type.
            </summary><param name="parameterName">The name of the parameter.</param><param name="dataType">One of the VistaDBType values.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(System.String,VistaDB.VistaDBType,System.Int32)"><summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection, given the specified parameter name and value.
            </summary><param name="parameterName">The name of the parameter.</param><param name="dataType">One of the VistaDBType values.</param><param name="size">The size as an Int32.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Add(System.String,VistaDB.VistaDBType,System.Int32,System.String)"><summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection with the parameter name, the data type, and the column length.
            </summary><param name="parameterName">The name of the parameter.</param><param name="dataType">One of the VistaDBType values.</param><param name="size">The size as an Int32.</param><param name="sourceColumn">The name of the source column.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.AddWithValue(System.String,System.Object)"><summary>
            Adds a VistaDBParameter to the VistaDBParameterCollection with the parameter name and value.
            </summary><param name="parameterName">The name of the parameter.</param><param name="value">The value to be added.</param><returns>The new VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.AddRange(System.Array)"><summary>
            Adds an array of items with the specified values to the VistaDBParameterCollection.
            </summary><param name="values">An array of values of type VistaDBParameter to add to the collection.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Clear"><summary>
            Removes all VistaDBParameter values from the VistaDBParameterCollection.
            </summary></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Contains(System.Object)"><summary>
            Indicates whether a VistaDBParameter with the specified Value is contained in the collection.
            </summary><param name="value">The Value of the VistaDBParameter to look for in the collection.</param><returns>true if the VistaDBParameter is in the collection; otherwise false.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Contains(System.String)"><summary>
            Indicates whether a VistaDBParameter with the specified name exists in the collection.
            </summary><param name="parameterName">The name of the VistaDBParameter to look for in the collection.</param><returns>true if the VistaDBParameter is in the collection; otherwise false.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.CopyTo(System.Array,System.Int32)"><summary>
            Copies an array of items to the collection starting at the specified index.
            </summary><param name="array">The array of items to copy to the collection.</param><param name="index">The index in the collection to copy the items.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.GetEnumerator"><summary>
            Exposes the GetEnumerator method, which supports a simple iteration over a collection by a .NET Framework data provider.
            </summary><returns>An IEnumerator that can be used to iterate through the collection.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.IndexOf(System.Object)"><summary>
            Returns the index of the specified VistaDBParameter object.
            </summary><param name="value">The VistaDBParameter object in the collection.</param><returns>The index of the specified VistaDBParameter object.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.IndexOf(System.String)"><summary>
            Returns the index of the VistaDBParameter object with the specified name.
            </summary><param name="parameterName">The name of the VistaDBParameter object in the collection.</param><returns>The index of the VistaDBParameter object with the specified name.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Insert(System.Int32,System.Object)"><summary>
            Inserts the specified the index of the VistaDBParameter object with the specified name into the collection at the specified index.
            </summary><param name="index">The index at which to insert the VistaDBParameter object.</param><param name="value">The VistaDBParameter object to insert into the collection.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Insert(System.Int32,VistaDB.Provider.VistaDBParameter)"><summary>
            Inserts the specified the index of the VistaDBParameter object with the specified name into the collection at the specified index.
            </summary><param name="index">The index at which to insert the VistaDBParameter object.</param><param name="parameter">The VistaDBParameter object to insert into the collection.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Remove(System.Object)"><summary>
            Removes the specified VistaDBParameter object from the collection.
            </summary><param name="value">The VistaDBParameter object to remove.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.Remove(VistaDB.Provider.VistaDBParameter)"><summary>
            Removes the specified VistaDBParameter object from the collection.
            </summary><param name="parameter">The VistaDBParameter object to remove.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.RemoveAt(System.Int32)"><summary>
            Removes the VistaDBParameter object at the specified from the collection.
            </summary><param name="index">The index where the VistaDBParameter object is located.</param></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.RemoveAt(System.String)"><summary>
            Removes the VistaDBParameter object with the specified name from the collection.
            </summary><param name="parameterName">The name of the VistaDBParameter object to remove.</param></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.Count"><summary>
            Specifies the number of parameters in the collection.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.IsFixedSize"><summary>
            Specifies whether the collection is a fixed size.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.IsReadOnly"><summary>
            Specifies whether the collection is read-only.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.IsSynchronized"><summary>
            Specifies whether the collection is synchronized.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.SyncRoot"><summary>
            Specifies the Object to be used to synchronize access to the collection.
            </summary></member><member name="T:VistaDB.Provider.VistaDBParameterCollection.ParameterEnumerator"><summary>
            Parameter enumerator
            </summary></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.ParameterEnumerator.MoveNext"><summary>
            Advances the enumerator to the next element of the collection. 
            </summary><returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns></member><member name="M:VistaDB.Provider.VistaDBParameterCollection.ParameterEnumerator.Reset"><summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameterCollection.ParameterEnumerator.Current"><summary>
            Gets the current element in the collection.
            </summary></member><member name="T:VistaDB.Provider.VistaDBParameter"><summary>
            Represents a parameter to a VistaDBCommand and optionally its mapping to DataSet columns. This class cannot be inherited.
            </summary></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor"><summary>
            Initializes a new instance of the VistaDBParameter class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor(System.String,System.Object)"><summary>
            Initializes a new instance of the VistaDBParameter class that uses 
            the parameter name and a value of the new VistaDBParameter.
            </summary><param name="parameterName">The name of the parameter to map.</param><param name="value">An Object that is the value of the VistaDBParameter.</param></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor(System.String,VistaDB.VistaDBType)"><summary>
            Initializes a new instance of the VistaDBParameter class that uses 
            the parameter name and the data type.
            </summary><param name="parameterName">The name of the parameter to map.</param><param name="dataType">One of the VistaDBType values.</param></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor(System.String,VistaDB.VistaDBType,System.Int32)"><summary>
            Initializes a new instance of the VistaDBParameter class that uses 
            the parameter name, the VistaDBType, and the size.
            </summary><param name="parameterName">The name of the parameter to map.</param><param name="dataType">One of the VistaDBType values.</param><param name="size">The length of the parameter.</param></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor(System.String,VistaDB.VistaDBType,System.Int32,System.String)"><summary>
            Initializes a new instance of the VistaDBParameter class that uses 
            the parameter name, the VistaDBType, the size, and the source column name.
            </summary><param name="parameterName">The name of the parameter to map.</param><param name="dataType">One of the VistaDBType values.</param><param name="size">The length of the parameter.</param><param name="sourceColumn">The name of the source column.</param></member><member name="M:VistaDB.Provider.VistaDBParameter.#ctor(System.String,VistaDB.VistaDBType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.String,System.Data.DataRowVersion,System.Object)"><summary>
            Initializes a new instance of the VistaDBParameter class that uses 
            the parameter name, the type of the parameter, the size of the parameter, 
            a ParameterDirection, the source column, a DataRowVersion to use, 
            and the value of the parameter.
            </summary><param name="parameterName">The name of the parameter to map.</param><param name="dataType">One of the VistaDBType values.</param><param name="size">The length of the parameter.</param><param name="direction">One of the ParameterDirection values.</param><param name="isNullable">true if the value of the field can be null; otherwise false.</param><param name="sourceColumn">The name of the source column.</param><param name="sourceVersion">One of the DataRowVersion values.</param><param name="value">An Object that is the value of the SqlParameter.</param></member><member name="M:VistaDB.Provider.VistaDBParameter.ResetDbType"><summary>
            Resets the DbType property to its original settings.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.DbType"><summary>
            Gets or sets the DbType of the parameter.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.Direction"><summary>
            Gets or sets a value that indicates whether the parameter is input-only,
            output-only, bidirectional, or a stored procedure return value parameter.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.IsNullable"><summary>
            Gets or sets a value that indicates whether the parameter accepts null values.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.ParameterName"><summary>
            Gets or sets the name of the VistaDBParameter.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.Size"><summary>
            This property is not used.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.SourceColumn"><summary>
            Gets or sets the name of the source column mapped to the DataSet and used for loading or returning the Value.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.SourceColumnNullMapping"><summary>
            Sets or gets a value which indicates whether the source column is nullable.
            This allows VistaDBCommandBuilder to correctly generate Update statements for nullable columns.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.SourceVersion"><summary>
            Gets or sets the DataRowVersion to use when you load Value.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.Value"><summary>
            Gets or sets the value of the parameter.
            </summary></member><member name="P:VistaDB.Provider.VistaDBParameter.VistaDBType"><summary>
            Gets or sets the VistaDBType of the parameter.
            </summary></member><member name="T:VistaDB.IVistaDBValue"><summary>
            Boxed value
            </summary></member><member name="P:VistaDB.IVistaDBValue.Value"><summary>
            A value corresponding to VistaDB type implicitly converted to the object type
            </summary></member><member name="P:VistaDB.IVistaDBValue.IsNull"><summary>
            Helper property to check if value is assigned with null
            </summary></member><member name="P:VistaDB.IVistaDBValue.Type"><summary>
            VistaDB specified data type
            </summary></member><member name="P:VistaDB.IVistaDBValue.SystemType"><summary>
            Native system type corresponding to the VistaDBType
            </summary></member><member name="T:VistaDB.Provider.VistaDBProviderFactory"><summary>
            Represents a set of methods for creating instances of a VistaDB provider's implementation of the data source classes.
            </summary></member><member name="F:VistaDB.Provider.VistaDBProviderFactory.Instance"><summary>
            Static instance member which returns an instanced VistaDBProviderFactory class.
            </summary></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateCommand"><summary>
            Returns a strongly typed DbCommand instance.
            </summary><returns>A new strongly typed instance of DbCommand. </returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateCommandBuilder"><summary>
            Returns a strongly typed DbCommandBuilder instance.
            </summary><returns>A new strongly typed instance of DbCommandBuilder.</returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateConnection"><summary>
            Returns a strongly typed DbConnection instance.
            </summary><returns>A new strongly typed instance of DbConnection.</returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateConnectionStringBuilder"><summary>
            Returns a strongly typed DbConnectionStringBuilder instance.
            </summary><returns>A new strongly typed instance of DbConnectionStringBuilder.</returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateDataAdapter"><summary>
            Returns a strongly typed DbDataAdapter instance.
            </summary><returns>A new strongly typed instance of DbDataAdapter.</returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreateParameter"><summary>
            Returns a strongly typed DbParameter instance.
            </summary><returns>A new strongly typed instance of DbParameter.</returns></member><member name="M:VistaDB.Provider.VistaDBProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)"><summary>
            Returns a new CodeAccessPermission.
            </summary><param name="state">A member of the PermissionState enumeration.</param><returns>A strongly typed instance of CodeAccessPermission.</returns></member><member name="P:VistaDB.Provider.VistaDBProviderFactory.CanCreateDataSourceEnumerator"><summary>
            Always return false.
            </summary></member><member name="T:VistaDB.Provider.VistaDBTransaction"><summary>
            Represents a V-SQL transaction to be made in a VistaDB database. This class cannot be inherited.
            </summary></member><member name="M:VistaDB.Provider.VistaDBTransaction.Commit"><summary>
            Commit current transaction
            </summary></member><member name="M:VistaDB.Provider.VistaDBTransaction.Rollback"><summary>
            Rollback current transaction
            </summary></member><member name="M:VistaDB.Provider.VistaDBTransaction.Dispose(System.Boolean)"><summary>
            Releases the unmanaged resources used by the System.Data.Common.DbTransaction
            and optionally releases the managed resources.
            </summary><param name="disposing">If true, this method releases all resources held by any managed objects that
            this VistaDBTransaction references</param></member><member name="P:VistaDB.Provider.VistaDBTransaction.Connection"><summary>
            Gets the VistaDBConnection object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.
            </summary></member><member name="P:VistaDB.Provider.VistaDBTransaction.IsolationLevel"><summary>
            Isolation level for current transaction
            </summary></member><member name="T:VistaDB.Provider.VistaDBExecutionPlan"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBExecutionPlan.FirstBlock"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanResultBlock"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanBlock"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanBlock.PlanBlockType"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanBlock.Childs"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanBlock.BlockType"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Batch"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Result"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.LeftJoin"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.InnerJoin"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.AggregateStream"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Table"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Function"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Merge"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Union"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Sort"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.DistinctSort"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Top"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanBlock.BlockType.Scalar"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanBlock.PlanBlockCollection"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanBlock.PlanBlockCollection.Count"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanResultBlock.PlanResultType"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanResultBlock.QueryText"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanResultBlock.ResultType"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanResultBlock.ResultType.Select"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanResultBlock.ResultType.Insert"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanResultBlock.ResultType.Update"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanResultBlock.ResultType.Delete"><summary></summary></member><member name="F:VistaDB.Provider.VistaDBPlanResultBlock.ResultType.Other"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanTableBlock"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanTableBlock.TableName"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanTableBlock.IndexName"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanTableBlock.JoinedTable"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPlanFunctionBlock"><summary></summary></member><member name="P:VistaDB.Provider.VistaDBPlanFunctionBlock.FunctionName"><summary></summary></member><member name="T:VistaDB.Provider.VistaDBPipe"><summary>
            The data channel to send data from CLR Proc or CLR Trigger to the caller
            </summary></member><member name="M:VistaDB.Provider.VistaDBPipe.Enqueue(System.Object)"><summary>
            This overriden does not used
            </summary><param name="obj"></param><remarks>This method overriden for safe using</remarks></member><member name="M:VistaDB.Provider.VistaDBPipe.Dequeue"><summary>
            This overriden does not used
            </summary><returns>Null reference always</returns><remarks>This method overriden for safe using</remarks></member><member name="M:VistaDB.Provider.VistaDBPipe.Send(VistaDB.Provider.VistaDBDataReader)"><summary>
            Sends a multi-row result-set directly to the caller
            </summary><param name="reader">The multi-row result-set to be sent to the caller</param></member><member name="M:VistaDB.Provider.VistaDBPipe.Send(System.String)"><summary>
            Sends string message
            </summary><param name="message">the message to send</param></member><member name="M:VistaDB.Provider.VistaDBPipe.ExecuteAndSend(VistaDB.Provider.VistaDBCommand)"><summary>
            Executes the command passed as a parameter and sends the results to the caller.
            </summary><param name="command">The VistaDB.Provider.VistaDBCommand object to be executed</param></member><member name="M:VistaDB.Provider.VistaDBPipe.Clear"><summary>
            Closes all results collected to be send to the caller
            </summary></member><member name="T:VistaDB.Diagnostic.Errors"><summary>
            The collection of error string messages raised by VistaDB library
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.Nonsupported"><summary>
            Method or property not supported
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UpdateSpecification"><summary>
            Database specification changed. Pack database to update
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidVDBFormat"><summary>
            File is not a valid VistaDB 3 database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UpdateFTSSpecification"><summary>
            FTS index specification changed. Pack database to update
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateStorage"><summary>
            Cannot create data storage or file
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_OpenStorage"><summary>
            Cannot open data storage or file
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateHeader"><summary>
            Cannot create data storage header
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateHeader"><summary>
            Cannot activate data storage header
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateHeaderStructure"><summary>
            Cannot initialize header data
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ReadHeader"><summary>
            Cannot read header
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_WriteHeader"><summary>
            Cannot write header
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AllocateRowStructure"><summary>
            Allocate row structure in data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_StorageReadOnlyMode"><summary>
            Incompatible mode. Database storage is read-only. You cannot access it for write operations
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RowsetExlusiveMode"><summary>
            Incompatible mode. There is exclusive table instance already opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ReadStorage"><summary>
            Cannot read data storage or file
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_WriteStorage"><summary>
            Cannot write data storage or file
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DatastorageDeclaration"><summary>
            Cannot declare new data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateDatabase"><summary>
            Cannot create database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateIsolatedDatabase"><summary>
            Cannot create database in isolated storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateTemporaryDatabase"><summary>
            Cannot create temporary database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DatabasePassword"><summary>
            Invalid password. Cannot access database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_OpenDatabase"><summary>
            Cannot open database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_OpenIsolatedDatabase"><summary>
            Cannot open database in isolated storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateTable"><summary>
            Cannot create table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AlterTable"><summary>
            Cannot rename or alter table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropTable"><summary>
            Cannot drop table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_TableToDropOpened"><summary>
            Table is opened and cannot be dropped at current moment
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateTableHeader"><summary>
            Cannot create table header
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EmptyTableSchema"><summary>
            At least one column should be created in the table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_OpenTable"><summary>
            Cannot open table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NonExistedTable"><summary>
            Table is not found
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NonExistedIndex"><summary>
            Index is not found
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CloseTable"><summary>
            An error happened while table was being closed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CloseStorage"><summary>
            An error happened while data storage was being closed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateIndex"><summary>
            Cannot create index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropIndex"><summary>
            Cannot delete index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotDropFKIndex"><summary>
            Cannot explicitly delete foreign key index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EmptyIndexInformation"><summary>
            Index information absent
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateIndex"><summary>
            Cannot activate index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateDatabase"><summary>
            Cannot activate database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DeactivateIndex"><summary>
            Index deactivation
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateDefaultRow"><summary>
            Cannot create default values in table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateDefaultRow"><summary>
            Cannot initialize default values in table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateNodeAtPosition"><summary>
            Cannot access node at position
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SchemaChanges"><summary>
            Schema was changed by another instance. Data storage must be reopened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CompactFrameworkMode"><summary>
            You cannot use this database opening mode on Compact Framework
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyContainsNull"><summary>
            Primary key cannot contains column with null value
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeySingle"><summary>
            The primary key already exists. Only one primary key index allowed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyRefencedInDelete"><summary>
            Table contains primary key referenced and cannot be deleted
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateTableName"><summary>
            Duplicate table name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateIndexName"><summary>
            Duplicate index name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateColumnName"><summary>
            Duplicate Column name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_MustStandardIndexType"><summary>
            Index type should be standard
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IndexKeyColumnCountExceeds"><summary>
            Index key column count exceeds maximum allowed count
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IndexKeyColumnInvalid"><summary>
            Index key cannot contain the column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_MustVIndexType"><summary>
            Index type should be v-index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidName"><summary>
            Invalid name or alias
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ColumnType"><summary>
            Unsupported VistaDB type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_MaximumColumns"><summary>
            Column number exceeds maximum allowed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_FtsActiveIndex"><summary>
            Full text index cannot be made active
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_FullTextSingle"><summary>
            The full text index already exists. Only one full text index allowed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateTimestamp"><summary>
            Row cannot contain two and more columns with same VistaDB.Timestamp data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IsolateStorageAccessMode"><summary>
            Isolated database does not support access mode
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotRenameFKIndex"><summary>
            Cannot rename foreign key index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateLockPolicy"><summary>
            Storage cannot activate lock policy
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_LockStorage"><summary>
            Cannot lock data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_LockStreamPosition"><summary>
            Cannot lock file position
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_LockTimeout"><summary>
            Lock timeout expired
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_LockRow"><summary>
            Cannot lock row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UnlockRow"><summary>
            Cannot unlock row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ReleaseLocks"><summary>
            Cannot release locks
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_Filter"><summary>
            Cannot pass over v-filter statement
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DefaultValueFault"><summary>
            Cannot execute default value generator
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ConstraintFault"><summary>
            Cannot pass constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ReadonlyFault"><summary>
            Column marked as readonly
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NullFault"><summary>
            Column cannot contain null value
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_TableClosed"><summary>
            Cannot access closed table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidColumnByName"><summary>
            Cannot find the column specified by name. Verify the column exists in target table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidColumnByIndex"><summary>
            Cannot get column by index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NullValue"><summary>
            Column value is null
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IdentityExist"><summary>
            Identity assigned to the column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IdentityNonExist"><summary>
            Identity does not exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SetIdentity"><summary>
            Cannot create identity
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropIdentity"><summary>
            Cannot drop identity
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SeedNullValue"><summary>
            Seed value cannot be null
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_StepNullValue"><summary>
            Step value cannot be null
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidIdentityStep"><summary>
            Invalid step value
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NonSupportedIdentity"><summary>
            Column data type is not supported by identity
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DefaultValueNonExist"><summary>
            Default value script has not been assigned to column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SetDefaultValue"><summary>
            Cannot assign default value script for column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropDefaultValue"><summary>
            Cannot drop default value script for column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ConstraintNotExist"><summary>
            Constraint is not existing
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SetConstraint"><summary>
            Cannot set constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropConstraint"><summary>
            Cannot delete constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NonSupportedDefaultValue"><summary>
            Column data type is not supported by default value v-script
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyReferenced"><summary>
            Primary key is referenced by foreign key constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateForeignKey"><summary>
            Cannot set foreign key constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DropForeignKey"><summary>
            Cannot drop foreign key constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyNotFound"><summary>
            Primary key is not existing in table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyCannotBeRefered"><summary>
            Foreign key cannot relate to primary key
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RelationshipExist"><summary>
            Relationship with same name exists
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RelationshipDoesNotExist"><summary>
            Relationship does not exists
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PrimaryKeyIdenticalForeignKey"><summary>
            Parent key and child key are identical
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateRow"><summary>
            Cannot create row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UpdateRow"><summary>
            Cannot update row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DeleteRow"><summary>
            Cannot delete row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ActivateLink"><summary>
            Cannot activate link
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateLink"><summary>
            Cannot create link
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateLinks"><summary>
            Cannot create linked data
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UpdateLink"><summary>
            Cannot update link
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UpdateLinks"><summary>
            Cannot update linked data
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DeleteLink"><summary>
            Cannot delete link
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DeleteLinks"><summary>
            Cannot delete linked data
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidRowInUpdate"><summary>
            Trying to update inaccessible row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidRowInDelete"><summary>
            Trying to delete inaccessible row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RowOutdated"><summary>
            Row is modified or deleted by another thread or process
            </summary><remarks>This error may happen while the reading of the Text, NText or Image column is postponed and not happend at the moment of reading the main row buffer. 
            In such case the engine core ensures the possibility to read an external data buffer 
            containing content of the column.</remarks></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotFindKey"><summary>
            Find key procedure cannot be executed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotSynchKey"><summary>
            Cannot synchronize key position
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidOrderToFindKey"><summary>
            Invalid index to look for key
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IncorrectString"><summary>
            The string expression or object name is null reference or empty
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CompileExpression"><summary>
            Cannot compile expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CompileKeyExpression"><summary>
            Cannot compile index key expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CompileForExpression"><summary>
            Cannot compile FOR expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidExpression"><summary>
            Invalid expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ParenthesisMismatch"><summary>
            Parenthesis mismatch
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidDelimiter"><summary>
            Invalid delimiter
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidParameter"><summary>
            Invalid parameter or parameter type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_VDBType"><summary>
            Incorrect parameter type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ExpressionTypeCheck"><summary>
            Cannot match data types in expression or v-function signature
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidLogicalExpression"><summary>
            Expression should be logical
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EvaluateOperator"><summary>
            Cannot evaluate operator
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidIfElse"><summary>
            Invalid If-Else group
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UnexpectedThen"><summary>
            Unexpected Then
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_UnexpectedElse"><summary>
            Unexpected Else
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_MissingStringDelimiter"><summary>
            String constant has no end delimiter
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IncompleteExpression"><summary>
            Incomplete expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidOperation"><summary>
            Invalid operation
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidFloatFormat"><summary>
            Invalid float number format
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DynamicRange"><summary>
            Value exceeds dynamic range of the data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_StringExceedMaximum"><summary>
            Character column data exceeds maximum length
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DatatypeConverion"><summary>
            Cannot convert data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidCharLength"><summary>
            Data type maximum length should be between 1 and 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidPageCount"><summary>
            Invalid page count request to allocate by extended column data
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InitSpool"><summary>
            Cannot initialize sort spool
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EvaluateForExpression"><summary>
            Cannot evaluate index FOR expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EvaluateKey"><summary>
            Cannot evaluate index key
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_EvaluateExpression"><summary>
            Cannot evaluate expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateKey"><summary>
            Duplicate key found in index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotAssignEnvironmentVariable"><summary>
            Cannot assign environment variable
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CannotAlterRelationship"><summary>
            Cannot alter relationships in table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NodeEncryption"><summary>
            Cannot encrypt node
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NodeDecryption"><summary>
            Cannot decrypt node
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DataImport"><summary>
            Cannot import data from data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DataExport"><summary>
            Cannot export data to data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PackStorage"><summary>
            Cannot pack data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ZapStorage"><summary>
            Cannot delete all rows in data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_PackDatabase"><summary>
            Cannot pack database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ReadOnlyMode"><summary>
            Operation cannot be applied in read-only data storage mode
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SharedMode"><summary>
            Operation cannot be applied in shared data storage mode
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CleanStorage"><summary>
            Cannot clean up data storage
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_BeforeInsertingRow"><summary>
            Cannot execute script before inserting a new row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AfterInsertingRow"><summary>
            Cannot execute script after inserting a new row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_BeforeUpdatingRow"><summary>
            Cannot execute script before updating row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AfterUpdatingRow"><summary>
            Cannot execute script after updating row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AfterDeletingRow"><summary>
            Cannot execute script after deleting row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InitRecycling"><summary>
            Cannot initialize recycling
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ExportTable"><summary>
            Cannot export table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_InvalidCLRProcName"><summary>
            Name of CLR Proc with public static attributes not found
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateCLRProcName"><summary>
            Duplicate CLR Proc name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_ParametersNumberInCLRProc"><summary>
            Invalid parameters number passed to invoke CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcNotRegistered"><summary>
            The CLR Proc is not registered in database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcFillRowNotRegistered"><summary>
            The helper FillRow CLR Proc is not registered in database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcReferenced"><summary>
            The assembly references CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcRegisteringFault"><summary>
            Cannot register CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcUnregisteringFault"><summary>
            Cannot unregister CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRProcInvokeFault"><summary>
            Cannot invoke CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AssemblyNameRegistered"><summary>
            The name of assembly is already registered
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AssemblyNotRegistered"><summary>
            The assembly is not registered
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AssemblyAddFault"><summary>
            Cannot add assembly
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AssemblyUpdateFault"><summary>
            Cannot update assembly
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_AssemblyDeleteFault"><summary>
            Cannot delete assembly
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateCLRTriggerName"><summary>
            Duplicate CLR Trigger name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRTriggerRegisteringFault"><summary>
            Cannot register CLR Trigger
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRTriggerUnregisteringFault"><summary>
            Cannot unregister CLR Trigger
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRTriggerNotRegistered"><summary>
            The CLR Proc is not registered in database
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRTriggerReferenced"><summary>
            The assembly references CLR Trigger
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CLRTriggerInvalidEvent"><summary>
            Cannot set event type for CLR trigger
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_DuplicateSPName"><summary>
            Duplicate stored procedure name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_SPRegisteringFault"><summary>
            Cannot register stored procedure
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_BeginTransaction"><summary>
            Cannot begin transaction
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CommitTransaction"><summary>
            Cannot commit transaction
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RollbackTransaction"><summary>
            Cannot rollback transaction
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CreateTransactionLogTable"><summary>
            Cannot create transaction log for table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_OpenTransactionLogTable"><summary>
            Cannot open transaction log for table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_TransactionConcurrency"><summary>
            Opening transacted version of
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_IncorrectTpIsolationLevel"><summary>
            Isolation level not supported
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_NestedTransactionsNotSupported"><summary>
            Nested transactions not supported
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_RollbackHasNoBegin"><summary>
            The ROLLBACK TRANSACTION request has no corresponding BEGIN TRANSACTION
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dda_CommitHasNoBegin"><summary>
            The COMMIT TRANSACTION request has no corresponding BEGIN TRANSACTION
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedSymbol"><summary>
            Expected some symbol, but found another
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidParameterCount"><summary>
            Invalid parameter count in function
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedExprButFound"><summary>
            Expected some expression, but found another
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnterminatedString"><summary>
            Unterminated string
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnterminatedTblName"><summary>
            Unterminated table or column name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnterminatedClmnName"><summary>
            Unterminated column name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnterminatedComment"><summary>
            Unterminated comment
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedExpression"><summary>
            Expected some expression, but found another
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnknownDataType"><summary>
            Unknown data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidStatement"><summary>
            Invalid statement
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidParameterDataType"><summary>
            Invalid parameter data type in function
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_NestedAggregateFunction"><summary>
            Aggregate function cannot have nested aggregate functions
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_PatternMustBeString"><summary>
            Pattern must be string
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidPatternEscapeSymbol"><summary>
            Invalid pattern. Escape character must be enclosed in the single quotes and have only one symbol
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnterminatedPattern"><summary>
            Unterminated pattern
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidPatternFirstCharacter"><summary>
            Invalid pattern. First character in range must be smaller than second
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_UnexpectedError"><summary>
            Unexpected error
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidJoinCondition"><summary>
            Join condition must have boolean result
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidOperandDataType"><summary>
            Invalid operand data type for operator
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidLikeMatchExpression"><summary>
            LIKE match expression must be string compatible data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidUsingOfIS"><summary>
            Invalid using of IS operator. Expected NULL or NOT NULL, but found another
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidExprInResultColumn"><summary>
            Invalid expression in the result column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_AggColumnNotInGroupBy"><summary>
            Columns used in expression with aggregate function is not defined in GROUP BY clause
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_TableAliasDuplicated"><summary>
            Table alias duplicated
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedBooleanExpression"><summary>
            Expected boolean expression
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_WhereCannotHaveAggregate"><summary>
            WHERE clause cannot have aggregate functions
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ColumnNotExist"><summary>
            Column doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExprAlreadyPresentInGroup"><summary>
            Expression already present in GROUP BY clause
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExprNotPresentInGroup"><summary>
            Expression is not present in GROUP BY clause
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidHavingClauseCondition"><summary>
            HAVING clause must have boolean result
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidHavingExpressions"><summary>
            HAVING can have only expressions which is in SELECT result or in GROUP BY
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_TableNotExist"><summary>
            Table doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidGroupWithoutAggregate"><summary>
            GROUP BY cannot be used if result haven't aggregate functions
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidGroupWithAggregate"><summary>
            GROUP BY clause cannot have aggregate functions
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidHavingWithoutAggregate"><summary>
            HAVING clause cannot be used if result haven't aggregate functions
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedKeyword"><summary>
            Expected some keyword, but found another
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidUnionColumnCount"><summary>
            All SELECTs in union must have the same column count
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidUnionColumnTypes"><summary>
            All SELECTs in union must have the columns with compatible types
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_SameColumnInSomeTables"><summary>
            In some tables exists the same column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidGroupStatic"><summary>
            GROUP BY expression must contain at least one column
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CaseMustHaveWhen"><summary>
            CASE function must have at least one WHEN operator
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CaseWhenMustBeBoolean"><summary>
            If in CASE function is not defined input expression, than WHEN expressions must has boolean results
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CaseWhenMustBeInputDataType"><summary>
            In CASE function WHEN expressions must have data type compatible with input expression's data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidCaseResultDataType"><summary>
            CASE function results must have the same (or compatible) data types
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidTableName"><summary>
            Invalid table name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidColumnName"><summary>
            Invalid column name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InsertColumnFewerThanValues"><summary>
            There are fewer columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InsertValueFewerThanColumns"><summary>
            There are more columns in the INSERT statement than values specified in the VALUES clause. The number of values in the VALUES clause must match the number of columns specified in the INSERT statement
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InsertColumnFewerThanSelect"><summary>
            The select list for the INSERT statement contains more items than the insert list. The number of SELECT values must match the number of INSERT columns
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InsertSelectFewerThanColumn"><summary>
            The select list for the INSERT statement contains fewer items than the insert list. The number of SELECT values must match the number of INSERT columns
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidQueryIndex"><summary>
            Invalid query index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidToken"><summary>
            Invalid token in statement
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidCreateDatabaseParams"><summary>
            Invalid parameters in CREATE DATABASE
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CreateTableColumnsDuplicated"><summary>
            Column names duplicated in CREATE TABLE
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CreateTableConstraintDuplicated"><summary>
            Constraint names duplicated in CREATE TABLE
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_PrimaryKeyDuplicated"><summary>
            Table can have only one instance of primary key
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_TwoClusteredIndexes"><summary>
            Can be created only one clustered index
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidForeignKeyCount"><summary>
            Foreign key column count and primary key column count must be the same
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_IdentityAndDefaultValue"><summary>
            Column cannot have default value and identity at the same time
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_PrimaryKeyNotExist"><summary>
            Primary key doesn't exist in the table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidPrimaryKeyInReferences"><summary>
            Primary key defined in references doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidColumnCountInView"><summary>
            Column count defined in the view differs from column count defined in the SELECT
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ViewNameDuplicated"><summary>
            View name duplicated
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_SubQueryIsReadOnly"><summary>
            Sub query is read only.
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ViewIsReadOnly"><summary>
            View is read only.
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ViewNotExist"><summary>
            View doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_FunctionNotExist"><summary>
            Function doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidIdentifier"><summary>
            Invalid identifier
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_StoredProcIsReadOnly"><summary>
            Stored procedure result set is read only
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_FirstParameterMustBeObject"><summary>
            First parameter must have System.Object data type in the FillRow method
            for CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedOutParameter"><summary>
            Expected out parameter for CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_FillRowNotExist"><summary>
            FillRow method doesn't exist for CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_AssemblyNameNotDefined"><summary>
            Assembly name is not defined for CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidCLRProcParamType"><summary>
            Invalid parameter data type in CLR Proc
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_CLRProcExecutionError"><summary>
            CLR Proc execution error
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ParamNotDeclared"><summary>
            Parameter not declared
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ReservedWordNameOrAlias"><summary>
            Name or alias cannot be reserved word
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ExpectedConstraintEnd"><summary>
            Expected end of constraint
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidConstraintExpr"><summary>
            Constraint expression must have boolean result data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ParamRedeclaration"><summary>
            Parameter redeclaration
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidParamName"><summary>
            Invalid parameter name
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_ConstraintNotExist"><summary>
            Constraint doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_DatabaseNotOpened"><summary>
            Database not opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidDataTypeSpec"><summary>
            Invalid data type specification
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_DataTypeLenIsTooLong"><summary>
            Data type length is too big
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidSchemaName"><summary>
            Invalid schema name. DBO must be used instead
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidNewNameInRename"><summary>
            Invalid new object name in sp_rename function
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidObjectTypeInRename"><summary>
            Invalid object type in sp_rename function
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_DuplicateAction"><summary>
            Duplicate specification of the action in the trigger declaration.
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidTriggerDeclaration"><summary>
            Value is not a recognized trigger     
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_IncorrectSyntax"><summary>
            Incorrect syntax near the keyword "hint parameter"
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidFtsPattern"><summary>
            Syntax error in the full text search condition
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_InvalidCaseSyntax"><summary>
            Syntax error in the case function
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_FtsIndexRequired"><summary>
            Cannot use CONTAINS(*) predicate on table because it is not full-text indexed
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.sql_OnlySingleExpressionInSelectList"><summary>
            Only one expression can be specified in the select list.
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_SupportedOnlyCommand"><summary>
            VistaDB supports only Text and StoredProcedure command types
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_UnknownDataType"><summary>
            Unknown data type
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_SecondDataReader"><summary>
            VistaDBCommand cannot be executed while associated VistaDBDataReader object opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_ChangePropWhileDataAdapter"><summary>
            VistaDBCommand properties cannot be changed while associated VistaDBDataReader object opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_ChangePropWhileConnOpened"><summary>
            VistaDBConnection properties cannot be changed while it opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_InvalidNameSuffix"><summary>
            Name can support as suffix only "]"
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_InvalidNamePrefix"><summary>
            Name can support as prefix only "["
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_CommandTextEmpty"><summary>
            Command text is empty
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_ContextConnNotAvailable"><summary>
            Context connection is not available
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_CBSchemaCannotBeGenerated"><summary>
            Schema cannot be generated
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_ConnectionMustBeAssigned"><summary>
            Connection property must be assigned
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.ado_ConnectionMustBeOpened"><summary>
            Connection must be opened
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_Position"><summary>
            Cannot position to cached row in the table 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_LastKeyPosition"><summary>
            Last cached row doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_RowsAdded"><summary>
            New rows were added to the table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_SetScope"><summary>
            Cannot set scope on the table 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_ResetScope"><summary>
            Cannot reset scope from the table 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_SetFilter"><summary>
            Cannot set filter on the table 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_RowIsNotExist"><summary>
            Cached row doesn't exist
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_FindRow"><summary>
            Cannot find needed row 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_ActiveIndex"><summary>
            Cannot set active index 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_UpdateRow"><summary>
            Cannot update row
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_HideNewRow"><summary>
            New row doesn't exist in the current scope
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_InsertRow"><summary>
            Cannot insert new row to the table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_DeleteRow"><summary>
            Cannot delete row from the table 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_OpenTable"><summary>
            Cannot open table
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_Reset"><summary>
            Cannot reset cache 
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_ReadSchema"><summary>
            Cannot load table schema
            </summary></member><member name="F:VistaDB.Diagnostic.Errors.dt_ReadData"><summary>
            Cannot load table data
            </summary></member><member name="T:VistaDB.Diagnostic.VistaDBException"><summary>
            The DDA exception class
            </summary></member><member name="M:VistaDB.Diagnostic.VistaDBException.Contains(System.Int64)"><summary>
            Checks the error identifier in the chain of nested exceptions caused the current one
            </summary><param name="errorId">Error identifier to look for</param><returns>Found status</returns><seealso cref="T:VistaDB.Diagnostic.Errors" /></member><member name="P:VistaDB.Diagnostic.VistaDBException.Message"><summary>
            Gets the message describing the chain of nested exceptions caused the current one
            </summary></member><member name="P:VistaDB.Diagnostic.VistaDBException.LevelMessage"><summary>
            Get the message describing only current exception
            </summary></member><member name="P:VistaDB.Diagnostic.VistaDBException.ErrorId"><summary>
            VistaDB error identifier for this exception
            </summary><seealso cref="T:VistaDB.Diagnostic.Errors" /></member><member name="T:VistaDB.Diagnostic.VistaDBSQLException"><summary>
            The SQL exception class
            </summary></member><member name="P:VistaDB.Diagnostic.VistaDBSQLException.LineNo"><summary>
            Line number in SQL text when exception happened
            </summary></member><member name="P:VistaDB.Diagnostic.VistaDBSQLException.ColumnNo"><summary>
            Column number in SQL text when exception happened
            </summary></member><member name="T:VistaDB.Diagnostic.VistaDBDataTableException"><summary>
            The Data table exception class
            </summary></member><member name="M:VistaDB.Diagnostic.VistaDBDataTableException.#ctor(System.Int32)"><summary>
            Creates new instance of DataTable Exception class
            </summary><param name="errorId">Error number</param></member><member name="M:VistaDB.Diagnostic.VistaDBDataTableException.#ctor(System.Exception,System.Int32)"><summary>
            Creates new instance of DataTable Exception class 
            </summary><param name="e">Internal exception</param><param name="errorId">Error number</param></member><member name="P:VistaDB.Diagnostic.VistaDBDataTableException.IsCritical"><summary>
            Returns critical exception flag
            </summary></member><member name="T:VistaDB.DDA.IVistaDBConnection"><summary>
            Standard connection stuff supported by local, DDA connection
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConnection.Id"><summary>
            Unique identifier assigned to this IVistaDBConnection.  This ID should not be held across database connections or in multiple threads.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConnection.LCID"><summary>
            Default locale id to use by CreateDatabase
            </summary><seealso cref="M:VistaDB.DDA.IVistaDBDDA.CreateDatabase(System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)" /></member><member name="P:VistaDB.DDA.IVistaDBConnection.PageSize"><summary>
            Default page size in kilobytes to use by CreateDatabase
            </summary><seealso cref="M:VistaDB.DDA.IVistaDBDDA.CreateDatabase(System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)" /></member><member name="P:VistaDB.DDA.IVistaDBConnection.LockTimeout"><summary>
            Get or set timeout for lock operations in seconds
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConnection.PersistentLockFiles"><summary>
            Get or set policy for lock files. When it is true files, which correspond to specific table will not be deleted with its closing. 
            It allows some performance increasing in multi-usre environment.
            </summary></member><member name="T:VistaDB.DDA.IVistaDBDDA"><summary>
            DDA connection
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDDA.CreateDatabase(System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)"><summary>
            Instantiates secure/unsecured DDA database object and creates it physically on hard drive
            </summary><returns>IVistaDBDatabase object instance</returns><param name="fileName">Full database file name including path.  The database will be written to the current working directory if no path is provided.</param><param name="stayExclusive">Database file will be left in exclusive mode after the database is created.</param><param name="password">Password to use in order to encrypt database file information or null for non encrypted database</param><param name="pageSize">Page size to use by database storage in kilobytes. If 0 is passed default page size is used</param><param name="LCID">Locale id to use by culture info assigned to the database. If 0 is passed default locale id is used</param><param name="caseSensitive">Database character data are case sensitive</param><remarks>Parameter stayExclusive is not used by Compact Framework VistaDB version. Database file cannot be opened for writing by another application on Compact Framework.
            <para>
            VB.NET does not have a null primitive and should use Nothing when null is noted.
            </para></remarks><seealso cref="P:VistaDB.DDA.IVistaDBConnection.LCID" /><seealso cref="P:VistaDB.DDA.IVistaDBConnection.PageSize" /></member><member name="M:VistaDB.DDA.IVistaDBDDA.CreateIsolatedDatabase(System.String,System.String,System.Int32,System.Int32,System.Boolean)"><summary>
            Instantiates secure/unsecured DDA database object and creates it physically in isolated storage
            </summary><returns>IVistaDBDatabase object instance</returns><param name="fileName">Full database file name</param><param name="password">Password to use in order to encrypt database file information or null for non encrypted database</param><param name="pageSize">Page size to use by database storage in kilobytes. If 0 is passed default page size is used</param><param name="LCID">Locale id to use by culture info assigned to the database. If 0 is passed default locale id is used</param><param name="caseSensitive">Database character data are case sensitive</param><remarks>Parameter stayExclusive is not used by Compact Framework VistaDB version. Database file cannot be opened for writing by another application on Compact Framework.
            <para>
            VB.NET does not have a null primitive and should use Nothing when null is noted.
            </para></remarks><seealso cref="P:VistaDB.DDA.IVistaDBConnection.LCID" /><seealso cref="P:VistaDB.DDA.IVistaDBConnection.PageSize" /></member><member name="M:VistaDB.DDA.IVistaDBDDA.CreateInMemoryDatabase(System.String,System.Int32,System.Boolean)"><summary>
            Instantiates secure/unsecured DDA database object and creates temporary database storage
            </summary><returns>IVistaDBDatabase object instance</returns><param name="password">Password to use in order to encrypt database file information or null for non encrypted database</param><param name="LCID">Locale id to use by culture info assigned to the database. If 0 is passed default locale id is used</param><param name="caseSensitive">Database character data are case sensitive</param><remarks><para>
            VB.NET does not have a null primitive and should use Nothing when null is noted.
            </para></remarks><seealso cref="P:VistaDB.DDA.IVistaDBConnection.LCID" /><seealso cref="P:VistaDB.DDA.IVistaDBConnection.PageSize" /></member><member name="M:VistaDB.DDA.IVistaDBDDA.OpenDatabase(System.String,VistaDB.VistaDBDatabaseOpenMode,System.String)"><summary>
            Instantiates secure/unsecured DDA database object and opens database file
            </summary><param name="fileName">Full database file name</param><param name="mode">Database access mode</param><param name="password">Password to use in order to encrypt/decrypt database file information or null for non encrypted (non-secure) database</param><returns>IVistaDBDatabase instance</returns><remarks>On Compact Framework VistaDBDatabaseOpenMode may be ExclusiveReadWrite, ExclusiveReadOnly, SharedReadOnly</remarks><seealso cref="T:VistaDB.VistaDBDatabaseOpenMode" /></member><member name="M:VistaDB.DDA.IVistaDBDDA.OpenIsolatedDatabase(System.String,VistaDB.VistaDBDatabaseOpenMode,System.String)"><summary>
            Instantiates secure/unsecured DDA database object and open database file in isolated storage
            </summary><param name="fileName">Full database file name</param><param name="mode">Database access mode. Only VistaDBDatabaseOpenMode.ExclusiveReadWrite and VistaDBDatabaseOpenMode.ExclusiveReadOnly are allowed</param><param name="password">Password to use in order to encrypt/decrypt database file information or null for non encrypted (non-secure) database</param><returns>IVistaDBDatabase instance</returns><remarks>On Compact Framework VistaDBDatabaseOpenMode may be ExclusiveReadWrite, ExclusiveReadOnly, SharedReadOnly</remarks><seealso cref="T:VistaDB.VistaDBDatabaseOpenMode" /></member><member name="M:VistaDB.DDA.IVistaDBDDA.PackDatabase(System.String,System.String,System.Boolean,VistaDB.DDA.GaugeHookInfo)"><summary>
             Pack database to compress free space in the database and reorganize the 
             internal layout of the database on disk.  This overload uses the new GaugeHookInfo callback to give
             more information about the packing progress.
             <para>You may be prompted to pack the database if the file format has changed.</para></summary><param name="fileName">
             Full database file name including path unless the database is in the local 
             directory.
             </param><param name="password">
             Current password. Null or Nothing for non encrypted database.
             </param><param name="backup">
             True to create a backup copy before packing.  The backup file will be named
              the same as the original database, but with a .backupCopy appended to the 
             end of the filename.  If the file exists it will be overwritten.
             </param><param name="hook">
             Extended Information Gauge hook delegate method controlling pack progress and logging current operation.
             You may pass null or Nothing meaning there is no hook.
             </param><value></value><returns>void</returns><example><code lang="vbnet">
             Sub Main()
             	Dim DDAObj As VistaDB.DDA.IVistaDBDDA
             	DDAObj = VistaDB.DDA.VistaDBEngine.Connections.OpenDDA()
             	DDAObj.PackDatabase("C:\dest.vdb3", Nothing, False, Nothing)
            		' You do not have to provide a path - Dot Net looks in the current working directory by default.
            		DDAObj.PackDatabase("test.vdb3", Nothing, False, Nothing)
             End Sub
             </code><code lang="cs">
             public void PackingFunction
             {
             	IVistaDBDDA DDAObj = VistaDB.DDA.VistaDBEngine.Connections.OpenDDA();
            		// You do not have to provide a path - Dot Net looks in the current working directory by default.
            		DDAObj.PackDatabase(fileName, null, false, new GaugeHookInfo(this.OnPackInfo));
             }
             	
             public void OnPackInfo( VistaDB.DDA.IVistaDBHookInfo hookInfo )
             {
            		if( hookInfo.Progress &lt; 0 )
            			return;
            
             	int ProgressPercent =  = hookInfo.Progress;
             
             	string ProgressText = String.Concat("Performing ",hookInfo.Operation.ToString()," on ",hookInfo.TableName.ToString(),":");
            	}
             </code></example><remarks><para>
             VB.NET does not have a NULL primitive.  You should always use Nothing in 
             place of NULL for VB.NET.
             To call these functions in C# you must include the full namespace, or using
              statements:
             <code>
             using VistaDB;
             using VistaDB.DDA;
             </code></para><para>
             Look at the Data Builder source code PackDatabase function for an example of how to use the Callback hooks.
             </para></remarks><seealso cref="T:VistaDB.DDA.IVistaDBDDA"></seealso></member><member name="M:VistaDB.DDA.IVistaDBDDA.PackDatabase(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,VistaDB.DDA.GaugeHookInfo)"><summary>
             Pack database to compress free space in the database and reorganize the 
             internal layout of the database on disk.  This overload uses the new GaugeHookInfo callback to give
             more information about the packing progress.
             <para>You may be prompted to pack the database if the file format has changed.</para></summary><param name="fileName">
             Full database file name including path unless the database is in the local 
             directory.
             </param><param name="password">
             Current password
             </param><param name="newPassword">
             New password.
             If you have an encrypted database and wish to drop the encryption you may 
             set the password to null or Nothing and the encryption is removed.
             </param><param name="newPageSize">
             New page size.
             Pass a 0 here to leave the page size at the current setting.
             </param><param name="newLCID">
             New locale LocaleID.
             Pass a value of 0 to leave the LocaleID with it's current setting.
             </param><param name="newCaseSensitive">
             New case sensitivity setting.  This cannot be null, so if you want to 
             preserve your case sensitivity you must pass the same value as the database
              was created with initially.
             </param><param name="backup">
             True to create a backup copy before packing.  The backup file will be named
              the same as the original database, but with a .backupCopy appended to the 
             end of the filename.  If the file exists it will be overwritten.
             </param><param name="hook">
             Extended Information Gauge hook delegate method controlling pack progress and logging current operation.
             You may pass null or Nothing meaning there is no callback hook.
             </param><value></value><returns></returns><example><code lang="vbnet">
             Sub Main()
            		Dim DDAObj As VistaDB.DDA.IVistaDBDDA
            		DDAObj = VistaDB.DDA.VistaDBEngine.Connections.OpenDDA()
                 Dim OldPassword As String
                 Dim NewPassword As String
                 ' In this example we are modifying a database that had no password to now have one
                 ' Reverse to remove a password
                 OldPassword = Nothing
                 NewPassword = "pass.word"
                 DDAObj.PackDatabase("C:\test.vdb3", OldPassword, NewPassword, 0, 0, True, True, Nothing)
            		' You do not have to provide a path - Dot Net looks in the current working directory by default.
            		DDAObj.PackDatabase("test.vdb3", Nothing, False, Nothing)
             End Sub
             </code><code lang="cs">
             public void PackingFunction
             {
             	IVistaDBDDA DDAObj = VistaDB.DDA.VistaDBEngine.Connections.OpenDDA();
             	string OldPassword = null;
             	string NewPassword = "pass.word";
            		// You do not have to provide a path - Dot Net looks in the current working directory by default.
            		DDAObj.PackDatabase(fileName, OldPassword, NewPassword, pageSize, LCID, caseSensitive, false, new GaugeHookInfo(this.OnPackInfo));
             }
             	
             public void OnPackInfo( VistaDB.DDA.IVistaDBHookInfo hookInfo )
             {
            		if( hookInfo.Progress &lt; 0 )
            			return;
            
             	int ProgressPercent =  = hookInfo.Progress;
             
             	string ProgressText = String.Concat("Performing ",hookInfo.Operation.ToString()," on ",hookInfo.TableName.ToString(),":");
             
            	}
             </code></example><remarks><para>
             VB.NET does not have a NULL primitive.  You should always use Nothing in 
             place of NULL for VB.NET.
             To call these functions in C# you must include the full namespace, or using
              statements:
             <code>
             using VistaDB;
             using VistaDB.DDA;
             </code></para><para>
             Look at the Data Builder source code PackDatabase function for an example of how to use the Callback hooks.
             </para></remarks><seealso cref="T:VistaDB.DDA.IVistaDBDDA">VistaDB DDA Interface</seealso><seealso cref="T:VistaDB.DDA.IVistaDBHookInfo">Extended GaugeHookInfo structure</seealso></member><member name="T:VistaDB.DDA.IVistaDBColumn"><summary>
            Column interface
            </summary><remarks>
            You should not attempt to instantiate an object of this type with the new operator.
            </remarks></member><member name="M:VistaDB.DDA.IVistaDBColumn.Compare(VistaDB.DDA.IVistaDBColumn)"><summary>
            Compare between two column values
            </summary><param name="column">The column to compare with</param><returns>0 if equal; 1 if this column is greater; -1 if this column is less</returns></member><member name="P:VistaDB.DDA.IVistaDBColumn.Name"><summary>
            Column name
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.MaxLength"><summary>
            Maximum number of chars or bytes allocated in database. 
            This value should be multiplied by actual page size 
            expressed in kilobytes for ExtendedType.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.MinValue"><summary>
            Minimum column value for respective VistaDBType
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.MaxValue"><summary>
            Maximum column value for respective VistaDBType
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.AllowNull"><summary>
            Column value can have null value
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.ReadOnly"><summary>
            Column value cannot be changed in update operations
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumn.Modified"><summary>
            The flag is set to modified column status when a value assigned to the column
            </summary></member><member name="T:VistaDB.DDA.IVistaDBRow"><summary>
            Interface to a VistaDBRow object
            </summary></member><member name="M:VistaDB.DDA.IVistaDBRow.ClearModified"><summary>
            Clear modified flags for all columns in the row. 
            </summary></member><member name="M:VistaDB.DDA.IVistaDBRow.Compare(VistaDB.DDA.IVistaDBRow)"><summary>
            Compare with another key row column by column taking ascending column information into account
            </summary><param name="row">The row to compare with</param><returns>Zero if rows are equal, -1 if this row less and 1 otherwise</returns></member><member name="M:VistaDB.DDA.IVistaDBRow.CompareKey(VistaDB.DDA.IVistaDBRow)"><summary>
            Compare with another key row column by column taking ascending column 
            information and RowId into account. An equivalent of applying the Compare method. 
            If Compare results into 0 value, the RowId are being compared then. 
            The method may be used for IVistaDBTable rows as well.
            </summary><param name="key">The key to compare with</param><returns>Zero if rows are equal, -1 if this row less and 1 otherwise</returns></member><member name="M:VistaDB.DDA.IVistaDBRow.InitTop"><summary>
            Initialize the columns in the row with the most top column values. RowId is set to uint.MaxValue
            </summary></member><member name="M:VistaDB.DDA.IVistaDBRow.InitBottom"><summary>
            Initialize the columns in the row with the most bottom column values. RowId is set to uint.MinValue
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRow.Count"><summary>
            Number of columns contained in the row
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRow.RowId"><summary>
            Unique row identifier
            </summary></member><member name="T:VistaDB.DDA.IVistaDBTable"><summary>
            DDA table public interface. 
            Inherits IVistaDBQueryResult interface and extends it's functionality
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Close"><summary>
            Close the table and clear respective resources
            </summary><remarks>The same functionality is provided by Dispose method</remarks><seealso cref="M:System.IDisposable.Dispose" /></member><member name="M:VistaDB.DDA.IVistaDBTable.Evaluate(System.String)"><summary>
            Evaluate v-expression.
            </summary><param name="expression">V-expression to evaluate</param><returns>Row result</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.SetFilter(System.String,System.Boolean)"><summary>
            Set v-filter and try to optimize it if the  optimize parameter is true
            </summary><param name="expression">Filter expression</param><param name="optimize">Try to optimize filter using and existing indexes</param><remarks>
            Optimization is enabled by default.  If you are getting an error from a query, try to turn 
            optimization off and see if the query works correctly.
            </remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.ResetFilter"><summary>
            Reset all filters
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.GetFilter(System.Boolean)"><summary>
            Gets v-script filter.
            </summary><param name="optimizable">When it is true, returns v-script for optimizable filter. 
            Otherwise returns simple v-script filter</param><returns>V-script filter expression</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.GetScope(VistaDB.DDA.IVistaDBRow@,VistaDB.DDA.IVistaDBRow@)"><summary>
            Gets the IVistaDBRow objects containing current most top and most low rows. 
            which are situated before the first row((compound key) and after the last row(compound key) 
            in active index respectively
            </summary><param name="lowKey">The row(compound key) before the first available row(compound key) in active index</param><param name="highKey">The row(compound key) after the last available row(compound key) in active index</param></member><member name="M:VistaDB.DDA.IVistaDBTable.SetScope(VistaDB.DDA.IVistaDBRow,VistaDB.DDA.IVistaDBRow)"><summary>
            Set scope in active index
            </summary><param name="lowKey">The row(compound key) before the first available row(compound key) in active index</param><param name="highKey">The row(compound key) after the last available row(compound key) in active index</param><remarks>If lowKey or highKey passed as null reference, the ResetScope executed</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.SetScope(System.String,System.String)"><summary>
            Set scope in active index
            </summary><param name="lowKeyExpression">The v-script to use by engine in order to evaluate low scope key</param><param name="highKeyExpression">The v-script to use by engine in order to evaluate high scope key</param></member><member name="M:VistaDB.DDA.IVistaDBTable.ResetScope"><summary>
            Reset scope in active index
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Find(System.String,System.String,System.Boolean,System.Boolean)"><summary>
            Find the key in index and set found row as current
            </summary><param name="keyEvaluationExpression">The v-script to use by engine in order 
            to evaluate the key to look for in index</param><param name="indexName">Index name to look for the key</param><param name="partialMatching">Try to find first partial matching, when exact matching is absent</param><param name="softPosition">Try to position on the first row that follows by non-found key</param><returns>Find status. If the key not found, the current row position is set to bottom and EndOfTable flag is set</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.Find(VistaDB.DDA.IVistaDBRow,System.String,System.Boolean,System.Boolean)"><summary>
            Find the key in index and set found row as current
            </summary><param name="key">Compound key value to found</param><param name="indexName">Index name to look for key</param><param name="partialMatching">Try to find first partial matching, when exact matching is absent</param><param name="softPosition">Try to position on the first row that follows by non-found key</param><returns>Find status. If the key not found, the current row position is set to bottom and EndOfTable flag is set</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateIndex(System.String,System.String,System.Boolean,System.Boolean)"><summary>
            Create standard index
            </summary><param name="name">Index name</param><param name="keyExpression">Key expression with syntax "column1[;DESC(column2)[;...n]]". Key expression cannot enumerate more than 256 columns</param><param name="primary">The index should be respected as primary key constraint by core engine</param><param name="unique">The index is unique. It is ineffective parameter when primary parameter is set</param></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateTemporaryIndex(System.String,System.String,System.Boolean)"><summary>
            Create standard temporary index. When created the index is not added to database file storage 
            but kept separately in default user temporary folder. The file is deleted by core engine 
            when table is closed
            </summary><param name="name">Index name</param><param name="keyExpression">Key expression with syntax "column1[;DESC(column2)[;...n]]". Key expression cannot enumerate more than 256 columns</param><param name="unique">The index is unique</param></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateFTSIndex(System.String,System.String)"><summary>
            Create special index to use by full text search. Identity columns may not be used for FTS indexes.  Only a single FTS index may exist per table.
            
            </summary><param name="name">index name</param><param name="columns">Table columns participating full text index. These names are listed in the same string and separated with ';' sign</param><example>
            The following example creates an FTS Index on multiple columns.
            <code>
            using( IVistaDBDatabase db = DDAObj.OpenDatabase(dbName, VistaDBDatabaseOpenMode.ExclusiveReadWrite, null) )
            {
            	using( IVistaDBTable table = db.OpenTable("testtable", false, false) )
            	{
            		table.CreateFTSIndex("FTSTest", "col1;col2;col3;col4");
            	}
            }
            </code></example><example>
            To create a full text search index in SQL you execute the following style command:
            <code>
            CREATE FULLTEXT INDEX indexname on tablename(columnname,...)
            </code></example><remarks>The current implementation of DDA cannot query the FTS indexes.  Only the SQL CONTAINS command can look inside FTS indexes.</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.DropIndex(System.String)"><summary>
            Drop existing index
            </summary><param name="name">Index name</param><seealso cref="M:VistaDB.DDA.IVistaDBTable.DropFTSIndex" /><remarks>This cannot be used to drop FTS Indexes - see the DropFTSIndex command.</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.DropFTSIndex"><summary>
            Drop full text search index.  No params are required since there may be only one FTS Index per table.
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.RenameIndex(System.String,System.String)"><summary>
            Rename existing index without rebuilding.
            </summary><param name="oldName">Old index name</param><param name="newName">New index name</param><remarks>Method doesn't rename primary key index if it participates relationships. 
            You cannot rename with this method foreign key index either.</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateIdentity(System.String,System.String,System.String)"><summary>
            Create and initialize identity counter. Applied to integer type columns only.
            </summary><param name="columnName">Column to set identity for</param><param name="seedExpression">Initial value. If null string is passed 
            the initial value stays current default value</param><param name="stepExpression">Step to increment/decrement identity counter</param></member><member name="M:VistaDB.DDA.IVistaDBTable.DropIdentity(System.String)"><summary>
            Drop existing identity
            </summary><param name="columnName">Column name the identity is set on</param></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateDefaultValue(System.String,System.String,System.Boolean,System.String)"><summary>
            Overrides default value constant by execution of v-script.
            </summary><param name="columnName">The column the default value script is being assigned to</param><param name="vExpression">V-script expression</param><param name="useInUpdate">Execute default value script in update operation,
            when the explicit value has not been assigned to the column</param><param name="description">User's identity description</param></member><member name="M:VistaDB.DDA.IVistaDBTable.DropDefaultValue(System.String)"><summary>
            Drop existing default value v-script operation
            </summary><param name="columnName">Column the default value v-script is set on</param></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateConstraint(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"><summary>
            Create constraint to check after insert, update or before delete operations
            </summary><param name="name">Constraint's name to identify constraint instance</param><param name="vExpression">SQL expression to evaluate</param><param name="description">User's description to constraint. Optional. May be null reference</param><param name="insertion">When it is set to the true, the constraint will be checked after insert row operation</param><param name="update">When it is set to the true, the constraint will be checked after update row operation</param><param name="delete">When it is set to the true, the constraint will be checked after before delete operation. If v-expression is being evaluated to the false, the row will not be deleted</param></member><member name="M:VistaDB.DDA.IVistaDBTable.DropConstraint(System.String)"><summary>
             Drop existing constraint
            </summary><param name="name">Constraint's name</param></member><member name="M:VistaDB.DDA.IVistaDBTable.CreateForeignKey(System.String,System.String,System.String,VistaDB.DDA.VistaDBReferentialIntegrity,VistaDB.DDA.VistaDBReferentialIntegrity,System.String)"><summary>
            Create foreign key constraint that instantiates respective relationship in the database
            </summary><param name="constraintName">The name of foreign key constraint. This name will be used by core engine
            in order to create new index on foreign key. The index name may be used to set active index. But this 
            index cannot be deleted until constraint is set</param><param name="foreignKey">The foreign key expression. It should match the order 
            and type of primary key columns</param><param name="primaryTable">The table containing primary key to refer by foreign key</param><param name="updateIntegrity">The rule to follow in primary table update operation</param><param name="deleteIntegrity">The rule to follow in primary table delete operation</param><param name="description">User's description of this constraint</param></member><member name="M:VistaDB.DDA.IVistaDBTable.DropForeignKey(System.String)"><summary>
            Drop foreign key constraint. Respective foreign key index will be deleted from the table as well.
            </summary><param name="constraintName">Foreign key constraint name. It's the same name assigned to foreign key index.</param></member><member name="M:VistaDB.DDA.IVistaDBTable.Put(System.Int32,System.Object)"><summary>
            Assign column value with system type value by column order in the row.
            </summary><param name="index">Zero-based column's index in the row</param><param name="columnValue">The value to assign</param><remarks>This method tries convert system type value to VistaDBType value</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.Put(System.String,VistaDB.IVistaDBValue)"><summary>
            Assign column value by column name
            </summary><param name="columnName">Column's name</param><param name="columnValue">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.Put(System.Int32,VistaDB.IVistaDBValue)"><summary>
            Assign column value by column order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="columnValue">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutString(System.String,System.String)"><summary>
            Assign string value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutString(System.Int32,System.String)"><summary>
            Assign string value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutByte(System.String,System.Byte)"><summary>
            Assign byte value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutByte(System.Int32,System.Byte)"><summary>
            Assign byte value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt16(System.String,System.Int16)"><summary>
            Assign int16 value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt16(System.Int32,System.Int16)"><summary>
            Assign int16 value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt32(System.String,System.Int32)"><summary>
            Assign int32 value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt32(System.Int32,System.Int32)"><summary>
            Assign int32 value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt64(System.String,System.Int64)"><summary>
            Assign int64 value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutInt64(System.Int32,System.Int64)"><summary>
            Assign int64 value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutSingle(System.String,System.Single)"><summary>
            Assign Float value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutSingle(System.Int32,System.Single)"><summary>
            Assign Float value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDouble(System.String,System.Double)"><summary>
            Assign Double value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDouble(System.Int32,System.Double)"><summary>
            Assign Double value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDecimal(System.String,System.Decimal)"><summary>
            Assign Decimal value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDecimal(System.Int32,System.Decimal)"><summary>
            Assign Decimal value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutBoolean(System.String,System.Boolean)"><summary>
            Assign boolean value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutBoolean(System.Int32,System.Boolean)"><summary>
            Assign boolean value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDateTime(System.String,System.DateTime)"><summary>
            Assign DateTime value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutDateTime(System.Int32,System.DateTime)"><summary>
            Assign DateTime value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutBinary(System.String,System.Byte[])"><summary>
            Assign array of bytes value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutBinary(System.Int32,System.Byte[])"><summary>
            Assign array of bytes value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutGuid(System.String,System.Guid)"><summary>
            Assign Guid value to column by column's name
            </summary><param name="columnName">Column's name</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutGuid(System.Int32,System.Guid)"><summary>
            Assign Guid value to column by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param><param name="value">The value to assign</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutNull(System.String)"><summary>
            Set null value by column's name
            </summary><param name="columnName">Column's name</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutNull(System.Int32)"><summary>
            Set null value by column's order in the row
            </summary><param name="index">Zero-based column's index in the row</param></member><member name="M:VistaDB.DDA.IVistaDBTable.PutFromFile(System.String,System.String)"><summary>
            Put Text, NText, Image data from external file.
            </summary><param name="fileName">Name of file containing external data</param><param name="columnName">Column name the data put in</param><remarks>When it is used to take Text/NText data the method reads Unicode text from the file</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.PutFromFile(System.Int32,System.String)"><summary>
            Put Text, NText, Image data from external file.
            </summary><param name="fileName">Name of file containing external data</param><param name="index">Zero-based column's index in the row</param><remarks>When it is used to take Text/NText data the method reads Unicode text from the file</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.Get(System.String)"><summary>
            Get column value by column's name
            </summary><param name="columnName">Column's name</param><returns>IVistaDB object instance containing value of the column</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.Get(System.Int32)"><summary>
            Get column value by column's name
            </summary><param name="columnIndex">Column's index</param><returns>IVistaDB object instance containing value of the column</returns></member><member name="M:VistaDB.DDA.IVistaDBTable.Insert"><summary>
            The method should be called in the beginning the insert operation. 
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Post(System.Boolean)"><summary>
            The method should be called to finalize insert or update operations.
            </summary><param name="leaveRowLock">If set, the row lock applied explicitly by user
            before update or implicitly by core engine in update or insert operations
            wont be reset by core until explicit unlock operation done</param></member><member name="M:VistaDB.DDA.IVistaDBTable.Post"><summary>
            The method should be called to finalize insert or update operations. 
            After it is passed the core engine reset respective row lock.
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Delete"><summary>
            Immediately deletes current row and reset row lock if it 
            was set before delete operation
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Lock(System.Int64)"><summary>
            Lock row. If zero is passed, the entire table will be locked
            </summary><param name="rowId">Id of the row</param></member><member name="M:VistaDB.DDA.IVistaDBTable.Unlock(System.Int64)"><summary>
            Unlock row. If zero is passed, the entire table will be 
            unlocked and all existing row locks will be released
            </summary><param name="rowId">Id of the row</param></member><member name="M:VistaDB.DDA.IVistaDBTable.First"><summary>
            Set current row pointer to the first row position. 
            If there are no rows, the EndOfTable flag is set to the true value
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Last"><summary>
            Set current row pointer to the last row position. 
            If there are no rows, the EndOfTable flag is set to the true value
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Prev"><summary>
            Move row pointer one record ahead
            If there are no rows, the StartOfTable flag is set to the true value
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.Next"><summary>
            Advances current row pointer position
            If there are no rows, the EndOfTable flag is set to the true value
            </summary></member><member name="M:VistaDB.DDA.IVistaDBTable.MoveBy(System.Int32)"><summary>
            Advances current row pointer position
            </summary><param name="rowNumber">The number of rows to skip</param></member><member name="M:VistaDB.DDA.IVistaDBTable.ExportData(VistaDB.DDA.IVistaDBTable,System.String)"><summary>
            To export table data using constraint set on destination table.
            </summary><param name="table">Destination table. Must not be this table instance</param><param name="constraint">Constraint to activate while exporting data. 
            The constraint is being applied to the destination table and 
            checking every new row. It acts like the 'after creating row constraint'. 
            Must be null reference if no constraint is set</param><remarks>SetFilter may be applied to this table before calling the method in order to export only filtered data</remarks></member><member name="M:VistaDB.DDA.IVistaDBTable.SetGaugeHookInfo(VistaDB.DDA.GaugeHookInfo)"><summary>
            Defines a delegate that time consuming operations may call back in order to inform the user as to the progress of the operation and additional information.
            </summary><param name="hookInfo">Delegate method</param></member><member name="M:VistaDB.DDA.IVistaDBTable.SetEventHandler(VistaDB.DDA.IVistaDBHandler)"><summary>
            Set delegate method called by core engine by event
            </summary><param name="eventHandler">Handler object</param></member><member name="M:VistaDB.DDA.IVistaDBTable.ResetEventHandler(VistaDB.DDA.EventType)"><summary>
            Reset delegate method called by core engine by event
            </summary><param name="eventType">Event type</param></member><member name="P:VistaDB.DDA.IVistaDBTable.Name"><summary>
            Table name
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.ActiveIndex"><summary>
            Name of active index that pivots current row order
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.IsClosed"><summary>
            Get the value indicating whether the table is closed
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.ScopeKeyCount"><summary>
            Scans active index and calculates the keys in it with taking current scope into account.
            </summary><returns>The number of keys in the current scope. 
            If no current scope set the method calculates total key count 
            that is the number of table rows</returns><remarks>After execution the current row position of the parent table is undefined</remarks></member><member name="P:VistaDB.DDA.IVistaDBTable.LastSessionIdentity"><summary>
            Read the memory-cached value of last insert operation
            made to the identity columns by this table instance
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.LastTableIdentity"><summary>
            Read the last value of identity columns that 
            will be used by any client in nearest insert operation. 
            This value is saved in the file storage.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.CurrentKey"><summary>
            The unique key that points out current row when Key is read 
            or set respective row to be current when Key is wrote
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.CurrentRow"><summary>
            Row structure containing current table row columns
            While reading creates new current row copy. 
            When writing, caches data in the table until Post is issued.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.RowCount"><summary>
            Number of physical rows in the table
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.EndOfTable"><summary>
            Tests if a record movement function has placed the row pointer beyond the last row in the table.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.StartOfTable"><summary>
            Tests if a  a record movement function has placed the row pointer before the first row in the table
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.EnforceConstraints"><summary>
            Gets or sets a value indicating whether constraint rules are followed 
            when attempting any insert, update or delete operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.EnforceIdentities"><summary>
            Gets or sets a value indicating whether identities are active
            when attempting any insert operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTable.TemporaryIndexes"><summary>
            Get collection of temporary indexes created and assigned to this table instance
            </summary></member><member name="T:VistaDB.DDA.IVistaDBDatabaseObject"><summary>
            General information about database object
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabaseObject.Name"><summary>
            The name of database object
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabaseObject.Description"><summary>
            The user's description of the database object
            </summary></member><member name="T:VistaDB.DDA.IVistaDBDatabase"><summary>
            DDA database public interface
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.EnumTables"><summary>
            List of table names existing in database
            </summary><returns>Array list of table names</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.OpenTable(System.String,System.Boolean,System.Boolean)"><summary>
            Open table
            </summary><param name="name">Table name</param><param name="exclusive">Table will be accessed exclusively by this table instance only</param><param name="readOnly">Table instance will be accessed for read-only. The other instances still may write to the table 
            unless shareReadOnly database opening flag has set to the true value</param><returns>Instance of IVistaDBTable</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.TableSchema(System.String)"><summary>
            Get table schema existing in the database. You may read table schema without 
            opening the table
            </summary><param name="name">Table name</param><returns>IVistaDBTableSchema instance</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.NewTable(System.String)"><summary>
            The first method to call in order to create new table in database. This method instantiates an IVistaDBTableSchema object and returns it.
            </summary><param name="name">The name of new table</param><returns>IVistaDBTableSchema empty instance</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.CreateTable(VistaDB.DDA.IVistaDBTableSchema,System.Boolean,System.Boolean)"><summary>
            Create new table given the table schema.  You should call NewTable() first to get the schema to pass to this function.
            </summary><param name="schema">Table schema to create</param><param name="exclusive">When it is set, the table instance 
            will have exclusive access to the table.  Any other open attempts on the table will fail.</param><param name="readOnly">When it is set, the table instance 
            will have read-only access to the table. Any other opened instance may write to the table if this is nonexclusive.</param><returns>IVistaDBTable instance</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.AlterTable(System.String,VistaDB.DDA.IVistaDBTableSchema)"><summary>
            Alter table in according to new table schema
            </summary><param name="oldName">The current name of table to alter</param><param name="schema">Modified table schema</param><remarks>You should get the instance of IVistaDBTableSchema by TableSchema, 
            modify it and send to this method to apply table changes. You may pass null reference to <typeparamref name="newName" /> parameter 
            if you are not defining new name</remarks><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.TableSchema(System.String)" /></member><member name="M:VistaDB.DDA.IVistaDBDatabase.DropTable(System.String)"><summary>
            Drop existing table. The engine will verify it is possible to delete 
            the table and maintain relationships integrity in the database before allowing the DropTable to succeed. 
            </summary><param name="name">Table name</param></member><member name="M:VistaDB.DDA.IVistaDBDatabase.TestDatabaseObjectName(System.String,System.Boolean)"><summary>
            Test if name of table, column, index etc. is correct
            </summary><param name="name">Object name to test</param><param name="raiseException">Raises exception instead of returning test result value</param><exception cref="T:VistaDB.Diagnostic.VistaDBException">Raises VistaDBException with Errors.dda_InvalidName error</exception><seealso cref="T:VistaDB.Diagnostic.Errors" /><returns>Test status</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.ExportXml(System.String,VistaDB.DDA.VistaDBXmlWriteMode)"><summary>
            Export database schema and table data to xml-formated 
            file in according to the transfer list of tables. If relationships set in database, 
            the information will be exported only concerning those ones, which link tables included 
            into the transfer list
            </summary><param name="xmlFileName">XML file name</param><param name="mode">The export mode</param></member><member name="M:VistaDB.DDA.IVistaDBDatabase.ImportXml(System.String,VistaDB.DDA.VistaDBXmlReadMode,System.Boolean)"><summary>
            Update database schema and import table data in according to the transfer list of tables.
            </summary><param name="xmlFileName">XML file name</param><param name="mode">The import mode</param><param name="interruptOnError">When set, the import process will be interrupted 
            by any error and respective exception will be raised</param></member><member name="M:VistaDB.DDA.IVistaDBDatabase.AddToXmlTransferList(System.String)"><summary>
            Add table name to the table transfer list used by xml ExportXml/ImportXml stuff
            </summary><param name="tableName">Table name to add</param></member><member name="M:VistaDB.DDA.IVistaDBDatabase.ClearXmlTransferList"><summary>
            Clear table transfer list used by xml export/import stuff
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.GetLastIdentity(System.String,System.String)"><summary>
            Get last value assigned to the identity column in table insert operation at this database instance. 
            The table inserted the row may be already closed at current moment.
            </summary><param name="tableName">Table name</param><param name="columnName">Name of column containing identity</param><returns>IVistaDBColumn instance containing last identity value. If identity is not set for the column null returned</returns><remarks>You may input null instead column name to get first identity column in the row. You may input null instead 
            table name to get identity from table with last insertion</remarks></member><member name="M:VistaDB.DDA.IVistaDBDatabase.GetLastTimestamp(System.String)"><summary>
            Get last value assigned to the timestamp column in the table insert operation for this database instance. 
            The table inserted the row may be already closed at current moment.
            </summary><param name="tableName">Table name</param><returns>IVistaDBColumn instance containing last timestamp value. If timestamp is not set the null reference returned</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.BeginTransaction"><summary>
            Begin transaction in ReadCommitted isolation level
            </summary><see cref="P:VistaDB.DDA.IVistaDBDatabase.IsolationLevel" /></member><member name="M:VistaDB.DDA.IVistaDBDatabase.BeginTransaction(System.Data.IsolationLevel)"><summary>
            Begin transaction
            </summary><param name="level">The isolation level of the transaction</param><see cref="P:VistaDB.DDA.IVistaDBDatabase.IsolationLevel" /></member><member name="M:VistaDB.DDA.IVistaDBDatabase.CommitTransaction"><summary>
            Commit transaction
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.RollbackTransaction"><summary>
            Rollback current transaction
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.AddAssembly(System.String,System.String,System.String)"><summary>
            Add existing assembly from external file and store it in database
            </summary><param name="assemblyName">The assembly name to register in database</param><param name="assemblyFileName">The full file name containing the assembly</param><param name="description">User's description</param><remarks>If assembly with same name is already registered, an exception raised</remarks></member><member name="M:VistaDB.DDA.IVistaDBDatabase.UpdateAssembly(System.String,System.String,System.String)"><summary>
            Replace assembly registered in database with new assembly
            </summary><param name="assemblyName">The assembly name to replace</param><param name="assemblyFileName">The full file name containing the assembly</param><param name="description">User's description</param></member><member name="M:VistaDB.DDA.IVistaDBDatabase.DropAssembly(System.String,System.Boolean)"><summary>
            Drop the assembly from database
            </summary><param name="assemblyName">The assembly name to delete</param><param name="force">Delete the assembly and all CLR Procs referencing it</param><remarks>If assembly referenced by CLR Proc and <paramref name="force" /> is set to false an exception raised. 
            You may force to delete the assembly and all CLR Procs referencing it</remarks></member><member name="M:VistaDB.DDA.IVistaDBDatabase.EnumAssemblies"><summary>
            Enum assemblies registered in database
            </summary><returns>Enumeration of IVistaDBAssembly objects</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.RegisterCLRProc(System.String,System.String,System.String,System.String)"><summary>
            Looks for CLR Proc in assembly. If CLR Proc found, registers the link to this method by custom name 
            </summary><param name="procedureName">The CLR Proc custom name to register</param><param name="clrHostedMethod">The full name of CLR Proc hosted method. The name should 
            include namespace the CLR Proc belongs to. The procedure should be static</param><param name="assemblyName">The name of assembly registered in database with <b>CreateAssembly</b> or <b>UpdateAssembly</b></param><param name="description">User's description for this procedure. May be a null reference (Nothing in Visual Basic)</param><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.AddAssembly(System.String,System.String,System.String)" /><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.UpdateAssembly(System.String,System.String,System.String)" /><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.UnregisterCLRProc(System.String)" /><remarks>The assembly may contain a method to treat row results got with CLR Proc. In such case the CLR Proc should be marked with 
            VistaDBCLRKind attribute having the property FillRow initialize with name of respecting method</remarks></member><member name="M:VistaDB.DDA.IVistaDBDatabase.UnregisterCLRProc(System.String)"><summary>
            Unregister the link to CLR Proc
            </summary><param name="procedureName">The custom CLR Proc name</param><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.RegisterCLRProc(System.String,System.String,System.String,System.String)" /></member><member name="M:VistaDB.DDA.IVistaDBDatabase.EnumCLRProcs"><summary>
            Enum CLR Procs in database
            </summary><returns>The list of CLR Proc descriptions</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.PrepareCLRContext"><summary>
            Prepare current context to use by CLR Proc or trigger
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.PrepareCLRContext(VistaDB.DDA.IVistaDBPipe)"><summary>
            Prepare current context to use by CLR Proc or trigger
            <param name="pipe">The user-defined object to accept data issued by CLR Proc or trigger</param></summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.UnprepareCLRContext"><summary>
            Release current context used by CLR Proc
            </summary></member><member name="M:VistaDB.DDA.IVistaDBDatabase.InvokeCLRProc(System.String,System.Object[])"><summary>
            Invoke CLR Proc
            </summary><param name="procedureName">The CLR Proc custom name</param><param name="parameters">
            An argument list for the invoked method. This is a set of objects with the 
            same number, order, and type as the parameters of the function or procedure to be invoked</param><returns>An object containing the return value of the invoked function, or 
            a null reference (Nothing in Visual Basic) in the case of invoked procedure.</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.InvokeFillRowCLRProc(System.String,System.Object[])"><summary>
            Invoke the FillRow method for CLR procedure
            </summary><param name="procedureName">The CLR Proc custom name</param><param name="parameters">
            An argument list for the invoked method. This is a set of objects with the 
            same number, order, and type as the parameters of the function or procedure to be invoked</param><returns>An object containing the return value of the invoked function, or 
            a null reference (Nothing in Visual Basic) in the case of invoked procedure.</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.RegisterCLRTrigger(System.String,System.String,System.String,System.String,VistaDB.TriggerAction,System.String)"><summary>
            Looks for CLR Trigger in assembly. If CLR Trigger found, registers the link to this method by custom name 
            </summary><param name="triggerName">The CLR Trigger custom name to register</param><param name="clrHostedMethod">The full name of CLR Trigger hosted method. The name should 
            include namespace the CLR Trigger belongs to. The procedure should be static</param><param name="assemblyName">The name of assembly registered in database with <b>CreateAssembly</b> or <b>UpdateAssembly</b></param><param name="tableName">The name of table the trigger is set on</param><param name="triggerAction">The table level event to fire trigger</param><param name="description">User's description for this procedure. May be null (Nothing in VB.NET) to exclude a description.</param><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.AddAssembly(System.String,System.String,System.String)" /><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.UpdateAssembly(System.String,System.String,System.String)" /><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.UnregisterCLRProc(System.String)" /><remarks>
            Current version supports DML triggers. Only AfterInsert, AfterUpdate and AfterDelete actions supported by CLR Triggers
            <para>
            Also note that the DLL containing the CLR Trigger is loaded INTO the database and is no longer required.  
            This is to prevent a situation where the DLL is deleted or no longer with the database causing the database to no longer work.
            </para><para>
            During development of a CLR Trigger you will have to Unregister and Register  the CLRTrigger into the database each time you 
            rebuild your DLL for the changes to be loaded.  The database does not look at the DLL after this initial registration.
            </para></remarks></member><member name="M:VistaDB.DDA.IVistaDBDatabase.UnregisterCLRTrigger(System.String)"><summary>
            Unregister the link to CLR Trigger
            </summary><param name="triggerName">The custom CLR Trigger name</param><remarks>
            During development of a CLR Trigger you will have to Unregister and Register the CLRTrigger into the database each time you 
            rebuild your DLL for the changes to be loaded.  The database does not look at the DLL after this initial registration.
            </remarks><seealso cref="M:VistaDB.DDA.IVistaDBDatabase.RegisterCLRTrigger(System.String,System.String,System.String,System.String,VistaDB.TriggerAction,System.String)" /></member><member name="M:VistaDB.DDA.IVistaDBDatabase.EnumCLRTriggers"><summary>
            Enum all CLR Triggers registered in database
            </summary><returns>The list of CLR Trigger descriptions</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.EnumCLRTriggers(System.String)"><summary>
            Enum CLR Triggers set on a table
            </summary><param name="tableName">The table name the trigger is set on</param><returns>The list of CLR Trigger descriptions</returns></member><member name="M:VistaDB.DDA.IVistaDBDatabase.DataSpace"><summary>
            Test database storage to see how much file space IVistaDBDDA.PackDatabase operation could free
            </summary><returns>The file space allocated to all data in database file as a percentage. 
            This space includes the volume consumed by rolled back transactions 
            but cleaned up with IVistaDBDDA.PackDatabase</returns></member><member name="P:VistaDB.DDA.IVistaDBDatabase.Culture"><summary>
            Database culture used to collate character data or apply date 
            and time masks in filters or queries
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.CaseSensitive"><summary>
            Database sensitivity in character data
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.PageSize"><summary>
            The Page size in kilobytes.  A setting of 1 = 1,024 bytes. 
            <para>
            The optimal pagesize should be large enough to hold 3-5 records in your database.  
            You may change this at anytime, but the database must be packed after the change.
            </para></summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.Mode"><summary>
            Read current database opening mode
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.IsolatedStorage"><summary>
            Database file resides in isolated storage
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.Description"><summary>
            Database description
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.NestedTransactionLevel"><summary>
            Current level for nested transactions
            </summary><remarks>Nested transactions are not supported at this time. 
            The value returned by this property is the number of active transactions. 
            1 means active transaction, 0 means no transactions in progress.</remarks></member><member name="P:VistaDB.DDA.IVistaDBDatabase.IsolationLevel"><summary>
            Isolation level for current transaction
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDatabase.Relationships"><summary>
            Relationships list from the database
            </summary></member><member name="T:VistaDB.VistaDBType"><summary><para>VistaDB 3 data types</para><para>Please note that the VistaDB 2.x managed types are not supported natively in the current 3.x product.
            This is mostly due to our desire to be compatible with SQL Server.
            </para></summary><remarks>
            The only SQL Server type not currently supported natively is the XML column type.  This is due to the way
            that SQL Server allows for XPath queries to be executed against the XML columns.  We plan to add support for this at 
            a later time.
            </remarks></member><member name="F:VistaDB.VistaDBType.Char"><summary>
            System.String. Char(x)
            <para>
            Fixed length character data with length of N characters. 
            N must be a value from 1 through 8192. 
            Storage size is N bytes of the data converted from Unicode string to non-Unicode character array.
            </para></summary><remarks>Correspomding to SqlDbType.Char</remarks><seealso cref="F:System.Data.SqlDbType.Char" /></member><member name="F:VistaDB.VistaDBType.NChar"><summary>
            System.String. NChar(x)<para>
            Fixed length Unicode character data of N characters. 
            N must be a value from 1 through 8192. Storage size is two times N bytes
            </para><remarks>Corresponding to SqlDbType.NChar</remarks><seealso cref="F:System.Data.SqlDbType.NChar" /></summary></member><member name="F:VistaDB.VistaDBType.VarChar"><summary>
            System.String. Varchar(x)<para>
            Variable length character data with length of N characters. 
            N must be a value from 1 through 8192. 
            Storage size is the actual length in bytes of the data entered and converted 
            from Unicode string to non-Unicode character array, not a fixed size. 
            The data entered can be 0 characters in length. 
            Varchar data are stored inside the record.
            </para><remarks>Corresponding to SqlDbType.VarChar</remarks><seealso cref="F:System.Data.SqlDbType.VarChar" /></summary></member><member name="F:VistaDB.VistaDBType.NVarChar"><summary>
            System.String. NVarchar(x)<para>
            Variable length character data with length of N characters. 
            N must be a value from 1 through 8192. 
            Storage size, in bytes, is two times the number of characters entered. 
            The data entered can be 0 characters in length. 
            NVarchar data are stored inside the record.
            </para><remarks>Corresponding to SqlDbType.NVarChar</remarks><seealso cref="F:System.Data.SqlDbType.NVarChar" /></summary></member><member name="F:VistaDB.VistaDBType.Text"><summary>
            System.String. <para>Variable length character data with no explicit length. 
            Storage is outside the record (extended type). Storage data is non-Unicode character array.
            Maximum length is 134213632 characters multiplied by .vdb3 file page size 
            expressed in kilobytes (1 throw 16). </para><remarks>Corresponding to SqlDbType.Text</remarks><seealso cref="F:System.Data.SqlDbType.Text" /></summary></member><member name="F:VistaDB.VistaDBType.NText"><summary>
            System.String. <para>Variable length Unicode character data with no explicit length. 
            Storage is outside the record (extended type). Storage data is Unicode character array.
            Maximum length is 67106816 characters multiplied by .vdb3 file page size 
            expressed in kilobytes (1 through 16).</para><remarks>Corresponding to SqlDbType.NText</remarks><seealso cref="F:System.Data.SqlDbType.NText" /></summary></member><member name="F:VistaDB.VistaDBType.TinyInt"><summary>
            System.Byte. <para>8-bit unsigned integer.</para><remarks>Corresponding to SqlDbType.TinyInt</remarks><seealso cref="F:System.Data.SqlDbType.TinyInt" /></summary></member><member name="F:VistaDB.VistaDBType.SmallInt"><summary>
            System.Int16. <para>16-bit signed integer.</para><remarks>Corresponding to SqlDbType.SmallInt</remarks><seealso cref="F:System.Data.SqlDbType.SmallInt" /></summary></member><member name="F:VistaDB.VistaDBType.Int"><summary>
            System.Int32. <para>32-bit signed integer.</para><remarks>Corresponding to SqlDbType.Int</remarks><seealso cref="F:System.Data.SqlDbType.Int" /></summary></member><member name="F:VistaDB.VistaDBType.BigInt"><summary>
            System.Int64. <para>64-bit signed integer.</para><remarks>Corresponding to SqlDbType.BigInt</remarks><seealso cref="F:System.Data.SqlDbType.BigInt" /></summary></member><member name="F:VistaDB.VistaDBType.Real"><summary>
            System.Single. <para>A floating point number within 
            the range of -3.40E +38 through 3.40E +38.</para><remarks>Corresponding to SqlDbType.Real</remarks><seealso cref="F:System.Data.SqlDbType.Real" /></summary></member><member name="F:VistaDB.VistaDBType.Float"><summary>
            System.Double. <para>A double-precision (64-bit) floating-point number within 
            the range of -1.79E +308 through 1.79E +308.</para><remarks>Corresponding to SqlDbType.Float</remarks><seealso cref="F:System.Data.SqlDbType.Float" /></summary></member><member name="F:VistaDB.VistaDBType.Decimal"><summary>
            System.Decimal. <para>128-bit (16-byte) integers scaled by a variable power of 10.
            Store 12 bytes</para><remarks>Corresponding to SqlDbType.Decimal</remarks><seealso cref="F:System.Data.SqlDbType.Decimal" /></summary></member><member name="F:VistaDB.VistaDBType.Money"><summary>
            System.Decimal. <para>Signed 64-bit (8-byte) integers with scaling factor '4'. Store 8 bytes
            Relies on .Net Decimal type with fixed scaling factor</para><remarks>Corresponding to SqlDbType.Money</remarks><seealso cref="F:System.Data.SqlDbType.Money" /></summary></member><member name="F:VistaDB.VistaDBType.SmallMoney"><summary>
            System.Decimal. <para>Signed 32-bit (4-byte) integers with scaling factor '4'. 
            Store 4 bytes. Same as Currency but with less dynamic borders
            from -214,748.3648 through +214,748.3647</para><remarks>Corresponding to SqlDbType.SmallMoney</remarks><seealso cref="F:System.Data.SqlDbType.SmallMoney" /></summary></member><member name="F:VistaDB.VistaDBType.Bit"><summary>
            System.Boolean. <para>Boolean value that can be true, false, or null.</para><remarks>Corresponding to SqlDbType.Bit</remarks><seealso cref="F:System.Data.SqlDbType.Bit" /></summary></member><member name="F:VistaDB.VistaDBType.DateTime"><summary>
            System.DateTime. <para>Internal storage of this data type is 8 bytes. 
            Date and time data ranging and accuracy are respective System.DateTime 
            ranging and accuracy</para><remarks>Corresponding to SqlDbType.DateTime</remarks><seealso cref="F:System.Data.SqlDbType.DateTime" /></summary></member><member name="F:VistaDB.VistaDBType.SmallDateTime"><summary>
            System.DateTime. <para>Date and time data ranging in value from January 1, 1900 0:00
            to November 30, 4451 1:19 PM an accuracy of one minute. 
            Internal storage of this data type is 4 bytes</para><remarks>Corresponding to SqlDbType.SmallDateTime</remarks><seealso cref="F:System.Data.SqlDbType.SmallDateTime" /></summary></member><member name="F:VistaDB.VistaDBType.Image"><summary>
            System.Byte[]. <para>Variable length binary data with a maximum length of 134213632 bytes
            multiplied by .vdb3 file page size expressed in kilobytes (1 throw 16). 
            Storage is outside the record.</para><remarks>Corresponding to SqlDbType.Image</remarks><seealso cref="F:System.Data.SqlDbType.Image" /></summary></member><member name="F:VistaDB.VistaDBType.VarBinary"><summary>
            System.Byte[]. <para>Variable length binary data with a maximum length of 65535 bytes.
            Storage is inside the record</para><remarks>Corresponding to SqlDbType.VarBinary</remarks><seealso cref="F:System.Data.SqlDbType.VarBinary" /></summary></member><member name="F:VistaDB.VistaDBType.UniqueIdentifier"><summary>
            System.Guid. <para>A globally unique identifier (or GUID). Storage is inside the record</para><remarks>Corresponding to SqlDbType.UniqueIdentifier</remarks><seealso cref="F:System.Data.SqlDbType.UniqueIdentifier" /></summary></member><member name="F:VistaDB.VistaDBType.Timestamp"><summary>
            System.Int64. <para>64-bit signed integer.</para>
            Automatically generated binary numbers, which are guaranteed to be unique within a database. This datatype
            does not store date or time information. 
            <remarks><para>Corresponding to SqlDbType.TimeStamp</para><para>
            This is from the SQL Server docs: Is a data type that exposes automatically generated, unique binary 
            numbers within a database. timestamp is generally used as a mechanism for version-stamping table rows. 
            The storage size is 8 bytes. The timestamp data type is just an incrementing number and does not preserve a date or a time. 
            To record a date or time, use a DateTime data type.
            </para><para>
            We use a 64 bit integer which is functionally the same as an 8 byte binary value.  8 binary bytes (8 bits each) is a 64 bit value.
            We visually show it to the user differently in the Data Builder than how Microsoft does.  The SQL Server management studio shows the TIMESTAMP as BINARY
            data, we show the actual value.  We use a single 64 bit value to make comparisons faster, rather than comparing each 8 bit value across 8 bytes.
            </para></remarks><seealso cref="F:System.Data.SqlDbType.Timestamp" /><seealso cref="F:VistaDB.VistaDBType.DateTime" /></summary></member><member name="F:VistaDB.VistaDBType.Unknown"><summary>
            Reserved
            </summary></member><member name="T:VistaDB.VistaDBDatabaseOpenMode"><summary>
            The database open mode
            </summary></member><member name="F:VistaDB.VistaDBDatabaseOpenMode.ExclusiveReadWrite"><summary>
            Database file opened exclusively for read/write operations
            </summary></member><member name="F:VistaDB.VistaDBDatabaseOpenMode.ExclusiveReadOnly"><summary>
            Database file opened exclusively for read-only operations
            </summary></member><member name="F:VistaDB.VistaDBDatabaseOpenMode.NonexclusiveReadWrite"><summary>
            Database file opened in shared mode for read/write operations
            </summary><remarks>This mode is not allowed on Compact Framework</remarks></member><member name="F:VistaDB.VistaDBDatabaseOpenMode.NonexclusiveReadOnly"><summary>
            Database file opened in shared mode for read-only operations. 
            The other clients may write to the database
            </summary><remarks>This mode is not allowed on Compact Framework</remarks></member><member name="F:VistaDB.VistaDBDatabaseOpenMode.SharedReadOnly"><summary>
            Database file opened in shared mode for read-only operations by all clients. 
            </summary></member><member name="T:VistaDB.VistaDBCLRProcAttribute"><summary>
            Used to mark a method definition in an assembly as a CLR Proc. The
            properties on the attribute reflect the physical characteristics used when
            the type is registered with VistaDB. This class cannot be inherited.
            </summary></member><member name="M:VistaDB.VistaDBCLRProcAttribute.#ctor"><summary>
            An attribute on a method definition in an assembly, used to indicate that
            the given method should be registered as a CLR Proc in database
            </summary></member><member name="P:VistaDB.VistaDBCLRProcAttribute.Kind"><summary>
            The sort of result created by CLR Proc. 
            </summary></member><member name="P:VistaDB.VistaDBCLRProcAttribute.FillRow"><summary>
            The name of the helper CLR Proc to treat row results generated with registered CLR Proc.
            </summary></member><member name="T:VistaDB.VistaDBCLRProcKind"><summary>
            The sort of result created by CLR Proc. 
            This value is recognized by SQL parser to treat the method respectively
            </summary></member><member name="F:VistaDB.VistaDBCLRProcKind.Default"><summary>
            The CLR Proc executes standard calculation
            </summary></member><member name="F:VistaDB.VistaDBCLRProcKind.Aggregate"><summary>
            The CLR Proc should be recognized as aggregate function by SQL parser
            </summary></member><member name="T:VistaDB.VistaDBContext"><summary>
            Context of CLR Proc and triggers
            </summary></member><member name="T:VistaDB.VistaDBContext.SQLChannel"><summary>
            SQL context of CLR Proc and triggers
            </summary></member><member name="P:VistaDB.VistaDBContext.SQLChannel.IsAvailable"><summary>
            Shows active status of context
            </summary></member><member name="P:VistaDB.VistaDBContext.SQLChannel.Pipe"><summary>
            IVistaDBPipe data channel
            </summary></member><member name="P:VistaDB.VistaDBContext.SQLChannel.TriggerContext"><summary>
            Provides contextual information about the trigger that was fired.
            </summary></member><member name="P:VistaDB.VistaDBContext.SQLChannel.CurrentTransaction"><summary>
            Provides contextual information about current transaction
            </summary></member><member name="T:VistaDB.VistaDBContext.DDAChannel"><summary>
            DDA context of CLR Proc and triggers
            </summary></member><member name="P:VistaDB.VistaDBContext.DDAChannel.IsAvailable"><summary>
            Shows active status of context
            </summary></member><member name="P:VistaDB.VistaDBContext.DDAChannel.Pipe"><summary>
            IVistaDBPipe data channel
            </summary></member><member name="P:VistaDB.VistaDBContext.DDAChannel.CurrentDatabase"><summary>
            Returns database instance in the CLR Proc or CLR trigger
            </summary></member><member name="T:VistaDB.TriggerAction"><summary>
            Event to fire table level trigger. Used by the VistaDB.TriggerContext
            class to indicate what action fired the trigger.
            </summary><seealso cref="T:VistaDB.TriggerContext" /></member><member name="F:VistaDB.TriggerAction.AfterInsert"><summary>
            An INSERT statement was executed
            </summary></member><member name="F:VistaDB.TriggerAction.AfterUpdate"><summary>
            An UPDATE statement was executed
            </summary></member><member name="F:VistaDB.TriggerAction.AfterDelete"><summary>
            A DELETE statement was executed
            </summary></member><member name="T:VistaDB.TriggerContext"><summary>
            Provides contextual information about the trigger that was fired.
            </summary></member><member name="M:VistaDB.TriggerContext.IsUpdatedColumn(System.Int32)"><summary>
            Returns true if a column was affected by an INSERT or UPDATE statement.
            </summary><param name="columnOrdinal">The zero-based ordinal of the column.</param><returns>True if the column was affected by an INSERT or UPDATE operation.</returns></member><member name="P:VistaDB.TriggerContext.ColumnCount"><summary>
            Gets the number of columns contained by the data table bound to the trigger.
            </summary></member><member name="P:VistaDB.TriggerContext.TriggerAction"><summary>
            Indicates what action fired the trigger.
            </summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBValue"><summary>
            The abstract class implementing IVistaDBValue interface
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBValue.Value"><summary>
            The value converted (boxed) to the object type
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBValue.IsNull"><summary>
            Helper property to check if value is null reference
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBValue.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBValue.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBString"><summary>
            The value of string type that is wrapped into the class
            and represents NChar, Char, NVarChar, VarChar, NText and Text
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBString.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBString.#ctor(System.String)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBString.Value"><summary>
            The object value converted to the string type
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBString.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBString.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBDateTime"><summary>
            The value of DateTime type that is wrapped into the class 
            and represents VistaDBType.Date and VistaDBType.SmallDateTime
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDateTime.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDateTime.#ctor(System.DateTime)"><summary>
            Constructor
            </summary><param name="val">Initial Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBDateTime.Value"><summary>
            The DateTime type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDateTime.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDateTime.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBBoolean"><summary>
            The value of System.Bool type that is wrapped into the class 
            and represents VistaDBType.Bit
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBBoolean.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBBoolean.#ctor(System.Boolean)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBBoolean.Value"><summary>
            The System.Bool type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBBoolean.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBBoolean.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBByte"><summary>
            The value of System.Byte type that is wrapped into the class 
            and represents VistaDBType.TinyInt
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBByte.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBByte.#ctor(System.Byte)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBByte.Value"><summary>
            The Byte type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBByte.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBByte.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBInt16"><summary>
            The value of System.Int16 type that is wrapped into the class 
            and represents VistaDBType.SmallInt
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt16.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt16.#ctor(System.Int16)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt16.Value"><summary>
            The Int16 type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt16.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt16.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBInt32"><summary>
            The value of System.Int32 type that is wrapped into the class 
            and represents VistaDBType.Int
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt32.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt32.#ctor(System.Int32)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt32.Value"><summary>
            The Int16 type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt32.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt32.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBInt64"><summary>
            The value of System.Int64 type that is wrapped into the class 
            and represents VistaDBType.BigInt
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt64.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBInt64.#ctor(System.Int64)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt64.Value"><summary>
            The Int16 type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt64.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBInt64.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBDecimal"><summary>
            The value of System.Decimal type that is wrapped into the class 
            and represents VistaDBType.Decimal, VistaDBType.Money and VistaDBType.SmallMoney
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDecimal.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDecimal.#ctor(System.Decimal)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBDecimal.Value"><summary>
            The Decimal type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDecimal.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDecimal.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBBinary"><summary>
            The value of System.Byte[] type that is wrapped into the class 
            and represents VistaDBType.Binary and VistaDBType.Image
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBBinary.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBBinary.#ctor(System.Byte[])"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBBinary.Value"><summary>
            The Decimal type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBBinary.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBBinary.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBGuid"><summary>
            The value of System.Guid type that is wrapped into the class 
            and represents VistaDBType.UniqueIdentifier
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBGuid.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBGuid.#ctor(System.Guid)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBGuid.Value"><summary>
            The Decimal type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBGuid.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBGuid.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBDouble"><summary>
            The value of System.Double type that is wrapped into the class 
            and represents VistaDBType.Float
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDouble.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBDouble.#ctor(System.Double)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBDouble.Value"><summary>
            The Decimal type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDouble.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBDouble.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.VistaDBTypes.VistaDBSingle"><summary>
            The value of System.Single type that is wrapped into the class 
            and represents VistaDBType.Real
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBSingle.#ctor"><summary>
            Constructor
            </summary></member><member name="M:VistaDB.VistaDBTypes.VistaDBSingle.#ctor(System.Single)"><summary>
            Constructor
            </summary><param name="val">Predefined Value</param></member><member name="P:VistaDB.VistaDBTypes.VistaDBSingle.Value"><summary>
            The Decimal type converted to object
            </summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBSingle.Type"><summary><b>VistaDBType</b> for the <b>Value</b></summary></member><member name="P:VistaDB.VistaDBTypes.VistaDBSingle.SystemType"><summary>
            System type for the <b>Value</b></summary></member><member name="T:VistaDB.DDA.IVistaDBColumnAttributes"><summary>
            Column attributes. By default the column attributes are:
            AllowNull = true, ReadOnly = false, Encrypted = true( if database encrypted )
            </summary></member><member name="M:VistaDB.DDA.IVistaDBColumnAttributes.Compare(VistaDB.DDA.IVistaDBColumnAttributes)"><summary>
            Compares column attributes and returns difference
            </summary><param name="attributes">Attributes to compare with</param><returns>Difference between attributes</returns><remarks>Column name comparison is case insensitive</remarks></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.Name"><summary>
            Column's description
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.Description"><summary>
            Column's description
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.Caption"><summary>
            Column's caption
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.CodePage"><summary>
            Code page to encode character column type in file storage. 
            Non character type always has this value set to 0
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.Encrypted"><summary>
            Column value should be encrypted when it 
            is put to external data storage
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.Packed"><summary>
            Column value should be compressed when it 
            is written to storage. The property is effective for
            only VistaDBType.Text, VistaDBType.NText, VistaDBType.BLOB.  
            It does not compress the column while it is in a dataset.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.RowIndex"><summary>
            Zero based index for this column in the table row
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.ExtendedType"><summary>
            If column data type is extended. This means the main part of data is 
            stored out of record in another part of the database file.  This includes things like BLOBS 
            due to the variable length of their storage are not stored with the main row.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.FixedType"><summary>
            The column data type has fixed data buffer length
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributes.UniqueId"><summary>
            Unique identifier for column that doesn't depend on name or other attributes.
            This is used by DDA in AlterTable functionality.
            </summary></member><member name="T:VistaDB.DDA.IVistaDBColumnAttributesDifference"><summary>
            Helper interface to investigate difference between column attributes in details. 
            </summary><seealso cref="M:VistaDB.DDA.IVistaDBColumnAttributes.Compare(VistaDB.DDA.IVistaDBColumnAttributes)" /></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsRenamed"><summary>
            Has this column been renamed?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsTypeDiffers"><summary>
            Is this a different type?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsMaxLengthDiffers"><summary>
            Do the max lengths match?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsOrderDiffers"><summary>
            Have the order of the columns changed?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsEncryptedDiffers"><summary>
            Has the encryption state changed?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsPackedDiffers"><summary>
            Have the packed status flags changed?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsCodePageDiffers"><summary>
            Did the CodePage change?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsDescriptionDiffers"><summary>
            Are the descriptions different?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsCaptionDiffers"><summary>
            Are the captions different?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsNullDiffers"><summary>
            Did the IsNull flag change?
            </summary></member><member name="P:VistaDB.DDA.IVistaDBColumnAttributesDifference.IsReadOnlyDiffers"><summary>
            Did the ReadOnly flag change?
            </summary></member><member name="T:VistaDB.DDA.IVistaDBTableSchema"><summary>
            Table schema for usage in creation or altering of an IVistaDBTable.
            <para>
            You do not instantiate one of these objects through the new operator.  You instead use the table operators inside the IVistaDBDatabase interface.
            </para><code>
            //DDA Example code 
            IVistaDBDDA DDAObj = DDAObj = VistaDBEngine.Connections.OpenDDA();
            IVistaDBDatabase db1 = DDAObj.CreateDatabase(filename, true, null, 2, 0, false);
            IVistaDBTableSchema table1s = db1.NewTable("TestTable1");
            table1s.AddColumn("ID", VistaDBType.Int);
            table1s.DefineColumnAttributes("ID", false, false, false, false, null, null);
            table1s.AddColumn("COLINT", VistaDBType.Int);
            table1s.DefineColumnAttributes("COLINT", false, false, false, false, null, null);
            
            IVistaDBTable newTable = db1.CreateTable(table1s, false, false);
            newTable.CreateIdentity("ID", "1000", "1");
            newTable.CreateIndex("Primary", "ID", true, true);
            newTable.CreateIndex("idxDate", "COLDATETIME", false, false);
            newTable.Close();
            newTable.Dispose();
            newTable = null;
            
            </code></summary></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AddColumn(System.String,VistaDB.VistaDBType)"><summary>
            Append new non-character type column
            </summary><param name="name">Column's name</param><param name="type">VistaDBType column's type. If you pass Char, VarChar or Text type they will be 
            converted to respective N-type with maximum allowed size.</param><returns>0-based column's index</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AddColumn(System.String,VistaDB.VistaDBType,System.Int32,System.Int32)"><summary>
            Append new column
            </summary><param name="name">Column's name</param><param name="type">VistaDBType column's type</param><param name="maxLen">Maximum length of character type column. 
            This value doesn't matter for Text, NText and BLOB columns</param><param name="codePage">Code page to keep column's value of type Char, VarChar, Text being encrypted in the file</param><returns>0-based column's index</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AddColumn(System.String,VistaDB.VistaDBType,System.Int32)"><summary>
            Append new column using default ANSI code page for database culture
            </summary><param name="name">Column's name</param><param name="type">VistaDBType column's type</param><param name="maxLen">Maximum length of character type column. 
            This value doesn't matter for Text, NText and BLOB columns</param><returns>0-based column's index</returns><see cref="M:VistaDB.DDA.IVistaDBDDA.CreateDatabase(System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Boolean)" /></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DropColumn(System.String)"><summary>
            Drop the column by its name
            </summary><param name="name">Column's name</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineColumnAttributes(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)"><summary>
            Define column's attributes. By default the column attributes are:
            allowNull = true, readOnly = false, encrypted = true( if database encrypted, otherwise = false ),
            packed = false, caption = null, description = null
            </summary><param name="name">Column's name</param><param name="allowNull">Column can contain nulls</param><param name="readOnly">Column cannot be updated</param><param name="encrypted">Column level encryption flag. You may set/reset encryption 
            of the each individual column when database is encrypted</param><param name="packed">The extended type columns is packed 
            when put to database file</param><param name="caption">The caption to show in data grid</param><param name="description">The description of the column</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AlterColumnName(System.String,System.String)"><param name="oldName">Name of the existing column</param><param name="newName">New name to assign to the column</param><returns>IVistaDBColumnAttributes describing altered column</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AlterColumnType(System.String,VistaDB.VistaDBType,System.Int32,System.Int32)"><summary>
            Alter the type of existing column
            </summary><param name="name">Name of the existing column</param><param name="newType">New VistaDBType type for the column</param><param name="newMaxLen">New maximum length for character column. 
            If new VistaDBType type doesn't support this maximum the parameter has no affect</param><param name="newCodePage">New code page. If new VistaDBType type doesn't support 
            this maximum the parameter has no affect. Pass 0 value to use existing code page</param><returns>IVistaDBColumnAttributes describing altered column</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AlterColumnType(System.String,VistaDB.VistaDBType)"><summary>
            Alter the type of existing column
            </summary><param name="name">Name of the existing column</param><param name="newType">New VistaDBType type for the column</param><returns>IVistaDBColumnAttributes describing altered column</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.AlterColumnOrder(System.String,System.Int32)"><summary>
            Defines the new zero based column order for the column by its name in existing table schema. 
            The other columns will be re-ordered in the table schema respectively.
            </summary><param name="name">Name of the column</param><param name="order">New column order in the table row</param><returns>IVistaDBColumnAttributes describing altered column</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineIndex(System.String,System.String,System.Boolean,System.Boolean)"><summary>
            Define new index entry in table schema or update the existing one
            </summary><param name="name">Index name</param><param name="keyExpression">Key expression - Columns to be included in the index</param><param name="primary">Is this the primary index.  All primary key indexes must be unique.</param><param name="unique">The index unique. Has no effect if primary flag has been set</param><returns>Instance of new IVistaDBIndexInformation</returns></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineVIndex(System.String,System.String,System.String,System.Boolean)"><summary>
            Define V-index or update existing index to v-index type
            </summary><param name="name">Index name</param><param name="keyExpression">Key expression. The key expression is being built using v-functions</param><param name="forExpression">The filter expression. When it is not passed the index key is not added to the index. 
            The respective row still being inserted or modified</param><param name="unique">The index is unique. That means it cannot contain two or more similar keys. At the same time it doesn't interrupt 
            insertion or modification of the table record</param><returns>Instance of new IVistaDBIndexInformation</returns><remarks>THe v-index concept is a carry over from our Apollo database product.  It is NOT recommended in current systems and is going to be removed in the 3.1 version.</remarks></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DropIndex(System.String)"><summary>
            Drop existing index from the table schema. The method doesn't do 
            an actual delete operation but updates table schema in order 
            to use this information with latest alter table functionality.
            To free the space allocated in the database file a PackDatabase operation must be performed.
            </summary><param name="name">Index name</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineIdentity(System.String,System.String,System.String)"><summary>
            Assign the identity to the column. Currently the core engine supports 
            identity for the Int16, Int32 and Int64 data types only. The identity 
            counter does not participate transactions, thus it ensures unique value
            is assigned to the column in multi-user environment.
            Note, the engine doesn't check existed rows for the column values, 
            thus the setting identity makes no sure about unique numbers. 
            You may set the unique index on this column, to make 
            such guarantee explicitly.
            </summary><param name="columnName">Column's name</param><param name="seedValue">The initial identity value. This value may be evaluated throw v-expression</param><param name="stepExpression">The step value to use for identity. The step may be evaluated throw v-expression</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DropIdentity(System.String)"><summary>
            Drop existing identity
            </summary><param name="columnName">Column's name the identity is assigned to</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineDefaultValue(System.String,System.String,System.Boolean,System.String)"><summary>
            Assign default value to the column. The default value may 
            be either a constant or the evaluated one throw v-expression.
            You cannot set default value if identity has already been assigned 
            to the column
            </summary><param name="columnName">Column's name</param><param name="vExpression">V-expression to evaluate by constraint</param><param name="useInUpdate">When set, the engine uses this value in update operations, too</param><param name="description">User's description for this default value</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DropDefaultValue(System.String)"><summary>
            Drop the default value assigned to the column
            </summary><param name="columnName">Column's name</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DefineConstraint(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"><summary>
            Set constraint to check after insert, update or before delete operations
            </summary><param name="name">Constaint's name</param><param name="vExpression">V-expression to evaluate by constraint checks</param><param name="description">User's description to constraint</param><param name="insert">When it is set to the true, the constraint will be checked after insert row operation</param><param name="update">When it is set to the true, the constraint will be checked after update row operation</param><param name="delete">When it is set to the true, the constraint will be checked after before delete operation. If v-expression is being evaluated to the false, the row will not be deleted</param></member><member name="M:VistaDB.DDA.IVistaDBTableSchema.DropConstraint(System.String)"><summary>
             Drop existing constraint
            </summary><param name="name">Constraint name (must exist)</param></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Name"><summary>
            Table name
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Description"><summary>
            Table description
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.ColumnCount"><summary>
            Number of columns in the table row
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.DroppedColumns"><summary>
            The collection of names the dropped columns in the origin table schema
            </summary><seealso cref="P:VistaDB.DDA.IVistaDBColumnAttributes.UniqueId" /></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.RenamedColumns"><summary>
            The collection of names the renamed columns in the origin table schema
            </summary><seealso cref="P:VistaDB.DDA.IVistaDBColumnAttributes.UniqueId" /></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Indexes"><summary>
            Collection of indexes information
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Identities"><summary>
            Collection of identities information
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Defaults"><summary>
            Collection of default values v-script information
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Constraints"><summary>
            Collection of constraints information
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.Triggers"><summary>
            Collection of CLR triggers assigned to this table
            </summary></member><member name="P:VistaDB.DDA.IVistaDBTableSchema.ForeignKeys"><summary>
            Information about relationships set for 
            this table through the foreign keys constraints
            </summary></member><member name="T:VistaDB.DDA.EventHook"><summary>
            Delegate method called by core by table modification event
            </summary><param name="eventHandler">Handler object</param><param name="row">New row data in 'before' events or current row data in 'after' events</param><returns>User's exception to markup proceed status. If null the modification process continues. 
            Otherwise respective exception is raised</returns></member><member name="T:VistaDB.DDA.EventType"><summary>
            The event to raise by table
            </summary></member><member name="F:VistaDB.DDA.EventType.BeforeInsert"><summary>
            Call event handler before insert operation
            </summary></member><member name="F:VistaDB.DDA.EventType.AfterInsert"><summary>
            Call event handler after insert operation
            </summary></member><member name="F:VistaDB.DDA.EventType.BeforeUpdate"><summary>
            Call event handler before update operation
            </summary></member><member name="F:VistaDB.DDA.EventType.AfterUpdate"><summary>
            Call event handler after update operation
            </summary></member><member name="F:VistaDB.DDA.EventType.BeforeDelete"><summary>
            Call event handler before delete operation
            </summary></member><member name="F:VistaDB.DDA.EventType.AfterDelete"><summary>
            Call event handler after delete operation
            </summary></member><member name="F:VistaDB.DDA.EventType.NewVersion"><summary>
            Call event handler when new table version is found
            </summary></member><member name="T:VistaDB.DDA.IVistaDBHandler"><summary>
            The user's defined event handler to raise by event
            </summary></member><member name="P:VistaDB.DDA.IVistaDBHandler.Type"><summary>
            Event type
            </summary></member><member name="P:VistaDB.DDA.IVistaDBHandler.Handler"><summary>
            Event callback delegate
            </summary></member><member name="P:VistaDB.DDA.IVistaDBHandler.UsersData"><summary>
            User's defined object
            </summary></member><member name="T:VistaDB.DDA.VistaDBHookInfoOperation"><summary>
            Information passed by DDA in time consuming operation
            </summary></member><member name="F:VistaDB.DDA.VistaDBHookInfoOperation.Indexing"><summary>
            Current time consuming operation is table indexing
            </summary></member><member name="F:VistaDB.DDA.VistaDBHookInfoOperation.DataExport"><summary>
            Current time consuming operation is table data export/import
            </summary></member><member name="T:VistaDB.DDA.IVistaDBHookInfo"><summary>
             Extended Information passed by DDA in time consuming operation.  This 
             </summary><example><code lang="cs">
             public void PackingFunction
             {
             	IVistaDBDDA DDAObj = VistaDB.DDA.VistaDBEngine.Connections.OpenDDA();
            		// You do not have to provide a path - Dot Net looks in the current working directory by default.
            		DDAObj.PackDatabase(fileName, null, false, new GaugeHookInfo(this.OnPackInfo));
             }
             	
             public void OnPackInfo( VistaDB.DDA.IVistaDBHookInfo hookInfo )
             {
            		if( hookInfo.Progress &lt; 0 )
            			return;
            
             	int ProgressPercent = hookInfo.Progress;
             
             	string ProgressText = String.Concat("Performing ",hookInfo.Operation.ToString()," on ",hookInfo.TableName.ToString(),":");
            	}
             </code></example><seealso cref="T:VistaDB.DDA.GaugeHookInfo">Information gauge hook callback</seealso><seealso cref="M:VistaDB.DDA.IVistaDBDDA.PackDatabase(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,VistaDB.DDA.GaugeHookInfo)" /></member><member name="P:VistaDB.DDA.IVistaDBHookInfo.Progress"><summary>
            Progress status for current operation as a percentage
            </summary></member><member name="P:VistaDB.DDA.IVistaDBHookInfo.Operation"><summary>
            Current operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBHookInfo.TableName"><summary>
            Name of table the operation is in progress on
            </summary></member><member name="T:VistaDB.DDA.GaugeHookInfo"><summary>
            Delegate method to pass progress status and other information by DDA 
            in time consuming operations
            </summary></member><member name="T:VistaDB.DDA.VistaDBReferentialIntegrity"><summary>
            The kind of referential persistence
            </summary></member><member name="F:VistaDB.DDA.VistaDBReferentialIntegrity.None"><summary>
            No action taken on related rows.
            The core engine raises exception 
            when trying to delete or update the primary 
            key with a value that is not referenced by 
            foreign key
            </summary></member><member name="F:VistaDB.DDA.VistaDBReferentialIntegrity.Cascade"><summary>
            When set, the engine deletes or updates 
            related foreign keys
            </summary></member><member name="F:VistaDB.DDA.VistaDBReferentialIntegrity.SetNull"><summary>
            When set, the engine sets the values of
            related foreign keys to the nulls
            </summary></member><member name="F:VistaDB.DDA.VistaDBReferentialIntegrity.SetDefault"><summary>
            When set, the engine tries to set the values of
            related foreign keys to the respective default values. 
            Afterward it checks the primary reference in according 
            with NoAction
            </summary></member><member name="T:VistaDB.DDA.IVistaDBRelationshipInformation"><summary>
            One to many relationship
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.Name"><summary>
            The name of relationship. When relationship is set this name coincides 
            with respective name of foreign key index created to maintain the relationship.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.PrimaryTable"><summary>
            The name of primary table
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.ForeignTable"><summary>
            The name of foreign table
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.ForeignKey"><summary>
            The foreign key expression
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.DeleteIntegrity"><summary>
            The rule to use in referential integrity policy in delete operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBRelationshipInformation.UpdateIntegrity"><summary>
            The rule to use in referential integrity policy in update operation
            </summary></member><member name="T:VistaDB.DDA.IVistaDBRelationshipList"><summary>
            The list of relationships assigned to the table or existing in the database
            </summary><seealso cref="P:VistaDB.DDA.IVistaDBTableSchema.ForeignKeys" /><seealso cref="P:VistaDB.DDA.IVistaDBDatabase.Relationships" /></member><member name="T:VistaDB.DDA.IVistaDBKeyColumn"><summary>
            Meta information about column participating an index key
            </summary></member><member name="P:VistaDB.DDA.IVistaDBKeyColumn.RowIndex"><summary>
            The order of this column in the parent table row
            </summary></member><member name="P:VistaDB.DDA.IVistaDBKeyColumn.Descending"><summary>
            Shows if the column has descend order in respective index
            </summary></member><member name="T:VistaDB.DDA.IVistaDBIndexInformation"><summary>
            Set of index flags and attributes
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.Name"><summary>
            Index's name
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.KeyExpression"><summary>
            Key expression
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.KeyStructure"><summary>
            Get array of table row columns' indexes participating the index key.
            It is ordered according to list of columns in key expression
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.ForExpression"><summary>
            Filter expression in v-index. It is null in standard index
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.Primary"><summary>
            The index is primary
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.Unique"><summary>
            The key values are unique values. 
            This index being standard (non-vtype) sets unique 
            constraint for table insert/update operations
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.FKConstraint"><summary>
            The index is generated by engine to support relationship. 
            This index cannot be dropped explicitly.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.VIndex"><summary>
            V-index
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.FTS"><summary>
            The index is generated by engine to support fast text search. 
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIndexInformation.Temporary"><summary>
            The index is temporary. It is not added to database storage 
            and kept separately in temporary user's directory
            </summary></member><member name="T:VistaDB.DDA.IVistaDBIndexList"><summary>
            List of table's indexes
            </summary><example>
            Through the DDA interfaces you can use this collection to determine if an index exists for a given table.
            <code>
            IVistaDBDatabase db = DDAUtils.BuildTestDatabase(ref DDAObj, dbname, false, null, false); 
            IVistaDBTableSchema schema = db.TableSchema("Table1"); 
            IVistaDBIndexList ixlist = schema.Indexes; 
            if( ixlist["targetindex"] == null ) 
            { 
               // Index does not exist 
            }
            </code></example></member><member name="T:VistaDB.DDA.IVistaDBIdentityInformation"><summary>
            Identity assigned to the column
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIdentityInformation.ColumnName"><summary>
            The name of column the identity is set on
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIdentityInformation.StepExpression"><summary>
            V-script to evaluate the step expression
            </summary></member><member name="P:VistaDB.DDA.IVistaDBIdentityInformation.SeedValue"><summary>
            Current identity value converted to string
            </summary><remarks>The request of this value for existing table 
            is followed by opening the table, reading last identity 
            value and the closing the table</remarks></member><member name="T:VistaDB.DDA.IVistaDBIdentityList"><summary>
            List of identities assigned to table
            </summary></member><member name="T:VistaDB.DDA.IVistaDBDefaultValueInformation"><summary>
            Default value v-script assigned to a column
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDefaultValueInformation.ColumnName"><summary>
            Column name the script is being assigned to
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDefaultValueInformation.Expression"><summary>
            V-expression to calculate default value
            </summary></member><member name="P:VistaDB.DDA.IVistaDBDefaultValueInformation.UseInUpdate"><summary>
            When it is set, the default value is used in update operations as well
            </summary></member><member name="T:VistaDB.DDA.IVistaDBDefaultList"><summary>
            The list of default value v-scripts assigned to the table
            </summary></member><member name="T:VistaDB.DDA.IVistaDBConstraintInformation"><summary>
            V-script constraint
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConstraintInformation.Name"><summary>
            Name of constraint
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConstraintInformation.Expression"><summary>
            V-script expression evaluated to boolean result. 
            It is supposed the constraint is being passed when 
            it is evaluated to the true boolean result.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConstraintInformation.AffectsInsertion"><summary>
            Constraint is evaluated during insert operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConstraintInformation.AffectsUpdate"><summary>
            Constraint is evaluated during update operation
            </summary></member><member name="P:VistaDB.DDA.IVistaDBConstraintInformation.AffectsDelete"><summary>
            Constraint is evaluated during delete operation
            </summary></member><member name="T:VistaDB.DDA.IVistaDBConstraintList"><summary>
            List of v-constraints set on the table
            </summary></member><member name="T:VistaDB.DDA.IVistaDBPipe"><summary>
            The user-defined data channel to accept data issued by CLR Proc or CLR Trigger working with DDA
            </summary></member><member name="M:VistaDB.DDA.IVistaDBPipe.Send(System.Object)"><summary>
            May be called by CLR Proc or CLR Trigger to send data reader to the caller
            </summary><param name="usersObject">The object to treat by caller</param></member><member name="T:VistaDB.DDA.IVistaDBCLRProc"><summary>
            Meta-information about CLR Proc
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRProc.Name"><summary>
            Custom name of the CLR Proc
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRProc.Signature"><summary>
            Signature provided by System.Reflection for CLR Proc
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRProc.AssemblyName"><summary>
            The name of assembly the CLR Proc is hosted in
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRProc.FullHostedName"><summary>
            The full name of respective assembly hosted method
            </summary></member><member name="T:VistaDB.DDA.IVistaDBCLRProcList"><summary>
            The list of CLR Procs
            </summary></member><member name="T:VistaDB.DDA.IVistaDBAssembly"><summary>
            The information about assembly registered in database
            </summary></member><member name="P:VistaDB.DDA.IVistaDBAssembly.Name"><summary>
            The name the assembly is registered with
            </summary></member><member name="P:VistaDB.DDA.IVistaDBAssembly.FullName"><summary>
            The full name of compiled assembly in according to <b>System.Reflection.AssemblyName.FullName</b> property
            </summary><seealso cref="P:System.Reflection.AssemblyName.FullName" /></member><member name="P:VistaDB.DDA.IVistaDBAssembly.ImageRuntimeVersion"><summary>
            Gets a string representing the version of the common language runtime for this assembly image
            </summary></member><member name="P:VistaDB.DDA.IVistaDBAssembly.Procedures"><summary>
            Gets the list of procedures compiled in assembly for possible registration.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBAssembly.Triggers"><summary>
            Gets the list of CLR triggers compiled in assembly for possible registration.
            </summary></member><member name="P:VistaDB.DDA.IVistaDBAssembly.COFFImage"><summary>
            An array of type byte that is a COFF-based image containing assembly
            </summary></member><member name="T:VistaDB.DDA.IVistaDBAssemblies"><summary>
            The list of assemblies registered in database
            </summary></member><member name="T:VistaDB.DDA.IVistaDBCLRTrigger"><summary>
            CLR Trigger description
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.Name"><summary>
            Custom name of the CLR Trigger
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.Signature"><summary>
            Signature provided by System.Reflection for CLR Trigger
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.AssemblyName"><summary>
            The name of assembly the CLR Trigger is hosted in
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.TableName"><summary>
            The name of table the trigger is set on
            </summary></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.TriggerAction"><summary>
            The type of action that fired the trigger
            </summary><remarks>Only AfterInsert, AfterUpdate and AfterDelete actions supported by CLR Triggers</remarks></member><member name="P:VistaDB.DDA.IVistaDBCLRTrigger.FullHostedName"><summary>
            The full name of respective assembly hosted method
            </summary></member><member name="T:VistaDB.DDA.IVistaDBCLRTriggerList"><summary>
            The list of CLR Triggers
            </summary></member><member name="T:VistaDB.DDA.IVistaDBCredential"><summary>
            Credential information to set secure DDA connection
            </summary><remarks>It is not supported by current version</remarks></member><member name="T:VistaDB.DDA.VistaDBXmlReadMode"><summary>
            XML read mode
            </summary></member><member name="F:VistaDB.DDA.VistaDBXmlReadMode.All"><summary>
            Reads XML schema and data
            </summary></member><member name="F:VistaDB.DDA.VistaDBXmlReadMode.DataOnly"><summary>
            Reads XML data only respecting current database schema
            </summary></member><member name="T:VistaDB.DDA.VistaDBXmlWriteMode"><summary>
            XML write mode
            </summary></member><member name="F:VistaDB.DDA.VistaDBXmlWriteMode.All"><summary>
            Writes XML schema and data
            </summary></member><member name="F:VistaDB.DDA.VistaDBXmlWriteMode.SchemaOnly"><summary>
            Writes XML schema only
            </summary></member><member name="F:VistaDB.DDA.VistaDBXmlWriteMode.DataOnly"><summary>
            Writes XML data only
            </summary></member><member name="T:VistaDB.DDA.VistaDBEngine"><summary>
            Core VistaDB engine class. Manages DDA connections.
            </summary><example> This sample shows how to work with DDA.
            <code>
            using System;
            using VistaDB.DDA;
            using VistaDB.Diagnostic;
            
            public class MyClass
            {
            	internal static readonly IVistaDBDDA DDAObj = VistaDBEngine.Connections.OpenDDA();
            
            	private string vdbException = "VistaDB Exception:" + "\n";
            	private string netException = ".NET Exception:" + "\n";
            
            	public void DoWork(string databaseName)
            	{
            		try
            		{
            			IVistaDBDatabase db = DDAObj.OpenDatabase(databaseName, VistaDBDatabaseOpenMode.NonExclusiveReadWrite, null);
            
            			try
            			{
            				// do some work here
            			}
            			finally
            			{
            				db.Dispose();
            			}
            		}
            		catch(VistaDBException ex)
            		{
            			MessageBox.Show(vdbException + ex.Message);
            		}
            		catch(Exception ex)
            		{
            			MessageBox.Show(netException + ex.Message);
            		}
            	}
            }
            </code></example><seealso cref="T:VistaDB.DDA.IVistaDBDDA" /><seealso cref="T:VistaDB.DDA.IVistaDBDatabase" /><seealso cref="T:VistaDB.Diagnostic.VistaDBException" /></member><member name="F:VistaDB.DDA.VistaDBEngine.Connections"><summary>
            Collection of opened DDA connections.
            </summary></member><member name="M:VistaDB.DDA.VistaDBEngine.OpenDDA"><summary>
            Instantiate DDA connection, that manages DDA database objects.  Use this call to create a new connection.
            <para>You may wish to instantiate one of these globally in your namespace and share it.  All calls are thread safe.</para></summary><returns>IVistaDBDDAConnection instance</returns></member><member name="M:VistaDB.DDA.VistaDBEngine.OpenDDA(VistaDB.DDA.IVistaDBCredential)"><summary>
            Instantiate secure DDA connection, that manages DDA database 
            objects in accordance with passed credential information.
            </summary><param name="credential">User credentials</param><returns>IVistaDBDDAConnection instance</returns></member><member name="M:VistaDB.DDA.VistaDBEngine.Clear"><summary>
            Dispose collected DDA connections and remove them from engine collection
            </summary></member><member name="P:VistaDB.DDA.VistaDBEngine.SyncRoot"><summary>
            Gets an object that can be used to synchronize access to the VistaDBEngine
            </summary></member><member name="T:VistaDB.Extra.VistaDBDataTable"><summary> 
            Representes dynamic cursor for VistaDB table.Can be used as Data Source for visual component.
            </summary></member><member name="M:VistaDB.Extra.VistaDBDataTable.#ctor(VistaDB.DDA.IVistaDBDatabase,System.String)"><summary>
            Initializes a new instance of the VistaDBDataTable class.
            </summary><param name="db">Instance of opened VistaDB Database</param><param name="tableName">Table name</param></member><member name="M:VistaDB.Extra.VistaDBDataTable.#ctor(VistaDB.DDA.IVistaDBDatabase,System.String,System.Boolean,System.Boolean,System.String,System.Int32,System.Boolean)"><summary>
            Initializes a new instance of the VistaDBDataTable class.
            </summary><param name="db">Instance of opened VistaDB Database</param><param name="tableName">Table name</param><param name="exclusive">Table open mode</param><param name="readOnly">Read-only mode flag</param><param name="indexName">Active index name</param><param name="cacheSize">Cache size for table cursor</param><param name="optimisticLocking">Optimistic locking flag</param></member><member name="M:VistaDB.Extra.VistaDBDataTable.Close"><summary>
            Close opened table
            </summary></member><member name="M:VistaDB.Extra.VistaDBDataTable.SetFilter(System.String,System.Boolean)"><summary>
            Set v-filter on the current table and try to optimize it when 'optimize' parameter is set
            </summary><param name="expr">Filter expression</param><param name="optimize">Try to optimize filter using and existing indexes</param></member><member name="M:VistaDB.Extra.VistaDBDataTable.Find(System.String,System.String,System.Boolean,System.Boolean)"><summary>
            Find the key in the current opened database and set found row to the first place in the cache.
            </summary><param name="keyExpr">The v-script to use by engine in order 
            to evaluate the key to look for in index </param><param name="idxName">Index name to look for key</param><param name="partMach">Try to find first partial matching, when exact matching is absent</param><param name="softPos">Try to position on the first row that follows by non-found key</param></member><member name="M:VistaDB.Extra.VistaDBDataTable.ClearFilter"><summary>
            Reset all filters from in opened table
            </summary><returns></returns></member><member name="M:VistaDB.Extra.VistaDBDataTable.SetScope(System.String,System.String)"><summary>
            Set scope in active index of opened table
            </summary><param name="lowExpr">The v-script to use by engine in order to evaluate low scope key</param><param name="highExpr">The v-script to use by engine in order to evaluate high scope key</param></member><member name="M:VistaDB.Extra.VistaDBDataTable.ClearScope"><summary>
            Reset scope in active index 
            </summary></member><member name="M:VistaDB.Extra.VistaDBDataTable.SetActiveIndex(System.String,System.Int32)"><summary>
            Set active index in the current table
            </summary><param name="indexName">Name of active index that pivots current row order</param><param name="selectedRow">"Current row position"</param><returns></returns></member><member name="M:VistaDB.Extra.VistaDBDataTable.GetCurrentRowId(System.Int64)"><summary>
            Return rowID of current row
            </summary></member><member name="E:VistaDB.Extra.VistaDBDataTable.ListChanged"><summary>
            Occurs when the list or an item in the list changes. 
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.ActiveIndex"><summary>
            Name of active index that pivots current row order
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.Count"><summary>
            Gets the number of elements contained in the ICollection.
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.GetExtendedNames"><summary>
            Property returns array of extended column names from the table
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.Exclusive"><summary>
            Indicates access mode to the table
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.TableSchema"><summary>
            Returns schema of the opend table
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.OptimisticLock"><summary>
            Gets or sets locking mode
            </summary></member><member name="P:VistaDB.Extra.VistaDBDataTable.ReadOnly"><summary>
            Gets or sets a value that indicates whether the table can be edited
            </summary></member></members></doc>